[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Orchestrating Microbiome Analysis",
    "section": "",
    "text": "Package: OMAAuthors: Leo Lahti [aut], Tuomas Borman [aut, cre], Felix GM Ernst [aut], and others (see the full list of contributors) [ctb]Compiled: 2023-11-15Package version: 0.98.16R version: R Under development (unstable) (2023-11-08 r85496)BioC version: 3.19License: CC BY-NC-SA 3.0 US\nWelcome\nYou are reading the online book, Orchestrating Microbiome Analysis with Bioconductor (Lahti et al. 2021), where we walk through common strategies and workflows in microbiome data science.\n\nLahti, Leo, Sudarshan Shetty, Felix M Ernst, et al. 2021. Orchestrating Microbiome Analysis with Bioconductor [Beta Version]. microbiome.github.io/oma/.\nThe book shows through concrete examples how you can take advantage of the latest developments in R/Bioconductor for the manipulation, analysis, and reproducible reporting of hierarchical and heterogeneous microbiome profiling data sets. The book was borne out of necessity, while updating microbiome analysis tools to work with Bioconductor classes that provide support for multi-modal data collections. Many of these techniques are generic and widely applicable in other contexts as well.\nThis work has been heavily influenced by other similar resources, in particular the Orchestrating Single-Cell Analysis with Bioconductor (Amezquita et al. 2020), phyloseq tutorials (Callahan et al. 2016) and microbiome tutorials (Shetty and Lahti 2019). This book extends these resources to teach the grammar of Bioconductor workflows in the context of microbiome data science. As such, it supports the adoption of general skills in the analysis of large, hierarchical, and multi-modal data collections. We focus on microbiome analysis tools, including entirely new, partially updated as well as previously established methods.\n\nAmezquita, Robert, Aaron Lun, Stephanie Hicks, and Raphael Gottardo. 2020. Orchestrating Single-Cell Analysis with Bioconductor. Bioconductor. https://bioconductor.org/books/release/OSCA/.\n\nCallahan, Ben J., Kris Sankaran, Julia A. Fukuyama, Paul J. McMurdie, and Susan P. Holmes. 2016. ‚ÄúBioconductor Workflow for Microbiome Data Analysis: From Raw Reads to Community Analyses [Version 2; Peer Review: 3 Approved].‚Äù F1000Research 5: 1492. https://doi.org/10.12688/f1000research.8986.2.\n\nShetty, Sudarshan, and Leo Lahti. 2019. ‚ÄúMicrobiome Data Science.‚Äù Journal of Biosciences 44: 115. https://doi.org/10.1007/s12038-019-9930-2.\nThis online resource and its associated ecosystem of microbiome data science tools are a result of a community-driven development process, and welcoming new contributors. Several individuals have contributed methods, workflows and improvements as acknowledged in the Introduction. You can find more information on how to find us online and join the developer community through the project homepage at microbiome.github.io. This online resource has been written in RMarkdown with the bookdown R package. The material is free to use with the Creative Commons Attribution-NonCommercial 3.0 License.\nDocker image\nA Docker image built from this repository is available here:\nüëâ ghcr.io/js2264/oma üê≥\n\n\n\n\n\n\nGet started now üéâ\n\n\n\nYou can get access to all the packages used in this book in &lt; 1 minute, using this command in a terminal:\n\n\n\nbash\n\ndocker run -it ghcr.io/js2264/oma:devel R\n\n\n\n\nRStudio Server\nAn RStudio Server instance can be initiated from the Docker image as follows:\n\n\n\nbash\n\ndocker run \\\n    --volume &lt;local_folder&gt;:&lt;destination_folder&gt; \\\n    -e PASSWORD=OHCA \\\n    -p 8787:8787 \\\n    ghcr.io/js2264/oma:devel\n\n\nThe initiated RStudio Server instance will be available at https://localhost:8787.\nSession info\n\n\n\n\n\n\nClick to expand üëá\n\n\n\n\n\n\nsessioninfo::session_info(\n    installed.packages()[,\"Package\"], \n    include_base = TRUE\n)\n##  ‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n##   setting  value\n##   version  R Under development (unstable) (2023-11-08 r85496)\n##   os       Ubuntu 22.04.3 LTS\n##   system   x86_64, linux-gnu\n##   ui       X11\n##   language (EN)\n##   collate  C\n##   ctype    en_US.UTF-8\n##   tz       Etc/UTC\n##   date     2023-11-15\n##   pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown)\n##  \n##  ‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n##   package                  * version    date (UTC) lib source\n##   abind                      1.4-5      2016-07-21 [2] CRAN (R 4.4.0)\n##   ade4                       1.7-22     2023-02-06 [2] CRAN (R 4.4.0)\n##   AnnotationDbi              1.65.2     2023-11-03 [2] Bioconductor\n##   AnnotationHub              3.11.0     2023-10-25 [2] Bioconductor\n##   ape                        5.7-1      2023-03-13 [2] CRAN (R 4.4.0)\n##   arrayhelpers               1.1-0      2020-02-04 [2] CRAN (R 4.4.0)\n##   askpass                    1.2.0      2023-09-03 [2] CRAN (R 4.4.0)\n##   backports                  1.4.1      2021-12-13 [2] CRAN (R 4.4.0)\n##   base                     * 4.4.0      2023-11-09 [3] local\n##   base64enc                  0.1-3      2015-07-28 [2] CRAN (R 4.4.0)\n##   beachmat                   2.19.0     2023-10-24 [2] Bioconductor\n##   beeswarm                   0.4.0      2021-06-01 [2] CRAN (R 4.4.0)\n##   BH                         1.81.0-1   2023-01-22 [2] CRAN (R 4.4.0)\n##   Biobase                    2.63.0     2023-10-24 [2] Bioconductor\n##   BiocBaseUtils              1.5.0      2023-10-24 [2] Bioconductor\n##   BiocFileCache              2.11.1     2023-10-26 [2] Bioconductor\n##   BiocGenerics               0.49.1     2023-11-01 [2] Bioconductor\n##   BiocManager                1.30.22    2023-08-08 [2] CRAN (R 4.4.0)\n##   BiocNeighbors              1.21.0     2023-10-24 [2] Bioconductor\n##   BiocParallel               1.37.0     2023-10-24 [2] Bioconductor\n##   BiocSingular               1.19.0     2023-10-24 [2] Bioconductor\n##   BiocStyle                  2.31.0     2023-10-24 [2] Bioconductor\n##   BiocVersion                3.19.1     2023-10-26 [2] Bioconductor\n##   biomformat                 1.31.0     2023-10-24 [2] Bioconductor\n##   Biostrings                 2.71.1     2023-10-25 [2] Bioconductor\n##   bit                        4.0.5      2022-11-15 [2] CRAN (R 4.4.0)\n##   bit64                      4.0.5      2020-08-30 [2] CRAN (R 4.4.0)\n##   bitops                     1.0-7      2021-04-24 [2] CRAN (R 4.4.0)\n##   blob                       1.2.4      2023-03-17 [2] CRAN (R 4.4.0)\n##   bluster                    1.13.0     2023-10-24 [2] Bioconductor\n##   bookdown                   0.36       2023-10-16 [2] CRAN (R 4.4.0)\n##   boot                       1.3-28.1   2022-11-22 [3] CRAN (R 4.4.0)\n##   brew                       1.0-8      2022-09-29 [2] CRAN (R 4.4.0)\n##   brio                       1.1.3      2021-11-30 [2] CRAN (R 4.4.0)\n##   bslib                      0.5.1      2023-08-11 [2] CRAN (R 4.4.0)\n##   cachem                     1.0.8      2023-05-01 [2] CRAN (R 4.4.0)\n##   Cairo                      1.6-1      2023-08-18 [2] CRAN (R 4.4.0)\n##   callr                      3.7.3      2022-11-02 [2] CRAN (R 4.4.0)\n##   checkmate                  2.3.0      2023-10-25 [2] CRAN (R 4.4.0)\n##   class                      7.3-22     2023-05-03 [3] CRAN (R 4.4.0)\n##   cli                        3.6.1      2023-03-23 [2] CRAN (R 4.4.0)\n##   clipr                      0.8.0      2022-02-22 [2] CRAN (R 4.4.0)\n##   cluster                    2.1.4      2022-08-22 [3] CRAN (R 4.4.0)\n##   coda                       0.19-4     2020-09-30 [2] CRAN (R 4.4.0)\n##   CodeDepends                0.6.5      2018-07-17 [2] CRAN (R 4.4.0)\n##   codetools                  0.2-19     2023-02-01 [3] CRAN (R 4.4.0)\n##   colorspace                 2.1-0      2023-01-23 [2] CRAN (R 4.4.0)\n##   commonmark                 1.9.0      2023-03-17 [2] CRAN (R 4.4.0)\n##   compiler                   4.4.0      2023-11-09 [3] local\n##   cpp11                      0.4.6      2023-08-10 [2] CRAN (R 4.4.0)\n##   crayon                     1.5.2      2022-09-29 [2] CRAN (R 4.4.0)\n##   credentials                2.0.1      2023-09-06 [2] CRAN (R 4.4.0)\n##   crosstalk                  1.2.0      2021-11-04 [2] CRAN (R 4.4.0)\n##   curatedMetagenomicData     3.11.0     2023-10-31 [2] Bioconductor\n##   curl                       5.1.0      2023-10-02 [2] CRAN (R 4.4.0)\n##   data.table                 1.14.8     2023-02-17 [2] CRAN (R 4.4.0)\n##   datasets                 * 4.4.0      2023-11-09 [3] local\n##   DBI                        1.1.3      2022-06-18 [2] CRAN (R 4.4.0)\n##   dbplyr                     2.4.0      2023-10-26 [2] CRAN (R 4.4.0)\n##   DECIPHER                   2.31.0     2023-10-24 [2] Bioconductor\n##   decontam                   1.23.0     2023-10-24 [2] Bioconductor\n##   DelayedArray               0.29.0     2023-10-24 [2] Bioconductor\n##   DelayedMatrixStats         1.25.1     2023-11-09 [2] Bioconductor\n##   desc                       1.4.2      2022-09-08 [2] CRAN (R 4.4.0)\n##   devtools                   2.4.5      2022-10-11 [2] CRAN (R 4.4.0)\n##   diffobj                    0.3.5      2021-10-05 [2] CRAN (R 4.4.0)\n##   digest                     0.6.33     2023-07-07 [2] CRAN (R 4.4.0)\n##   dir.expiry                 1.11.0     2023-10-24 [2] Bioconductor\n##   DirichletMultinomial       1.45.0     2023-10-24 [2] Bioconductor\n##   distributional             0.3.2      2023-03-22 [2] CRAN (R 4.4.0)\n##   docopt                     0.7.1      2020-06-24 [2] CRAN (R 4.4.0)\n##   downlit                    0.4.3      2023-06-29 [2] CRAN (R 4.4.0)\n##   dplyr                      1.1.3      2023-09-03 [2] CRAN (R 4.4.0)\n##   dqrng                      0.3.1      2023-08-30 [2] CRAN (R 4.4.0)\n##   DT                         0.30       2023-10-05 [2] CRAN (R 4.4.0)\n##   ellipsis                   0.3.2      2021-04-29 [2] CRAN (R 4.4.0)\n##   evaluate                   0.23       2023-11-01 [2] CRAN (R 4.4.0)\n##   ExperimentHub              2.11.0     2023-10-25 [2] Bioconductor\n##   fansi                      1.0.5      2023-10-08 [2] CRAN (R 4.4.0)\n##   farver                     2.1.1      2022-07-06 [2] CRAN (R 4.4.0)\n##   fastmap                    1.1.1      2023-02-24 [2] CRAN (R 4.4.0)\n##   fido                       1.0.4      2023-03-24 [2] CRAN (R 4.4.0)\n##   filelock                   1.0.2      2018-10-05 [2] CRAN (R 4.4.0)\n##   FNN                        1.1.3.2    2023-03-20 [2] CRAN (R 4.4.0)\n##   fontawesome                0.5.2      2023-08-19 [2] CRAN (R 4.4.0)\n##   foreach                    1.5.2      2022-02-02 [2] CRAN (R 4.4.0)\n##   foreign                    0.8-85     2023-09-09 [3] CRAN (R 4.4.0)\n##   formatR                    1.14       2023-01-17 [2] CRAN (R 4.4.0)\n##   fs                         1.6.3      2023-07-20 [2] CRAN (R 4.4.0)\n##   futile.logger              1.4.3      2016-07-10 [2] CRAN (R 4.4.0)\n##   futile.options             1.0.1      2018-04-20 [2] CRAN (R 4.4.0)\n##   generics                   0.1.3      2022-07-05 [2] CRAN (R 4.4.0)\n##   GenomeInfoDb               1.39.1     2023-11-08 [2] Bioconductor\n##   GenomeInfoDbData           1.2.11     2023-11-15 [2] Bioconductor\n##   GenomicRanges              1.55.1     2023-10-29 [2] Bioconductor\n##   gert                       2.0.0      2023-09-26 [2] CRAN (R 4.4.0)\n##   ggbeeswarm                 0.7.2      2023-04-29 [2] CRAN (R 4.4.0)\n##   ggdist                     3.3.0      2023-05-13 [2] CRAN (R 4.4.0)\n##   ggplot2                    3.4.4      2023-10-12 [2] CRAN (R 4.4.0)\n##   ggrastr                    1.0.2      2023-06-01 [2] CRAN (R 4.4.0)\n##   ggrepel                    0.9.4      2023-10-13 [2] CRAN (R 4.4.0)\n##   gh                         1.4.0      2023-02-22 [2] CRAN (R 4.4.0)\n##   gitcreds                   0.1.2      2022-09-08 [2] CRAN (R 4.4.0)\n##   glue                       1.6.2      2022-02-24 [2] CRAN (R 4.4.0)\n##   graph                      1.81.0     2023-10-24 [2] Bioconductor\n##   graphics                 * 4.4.0      2023-11-09 [3] local\n##   grDevices                * 4.4.0      2023-11-09 [3] local\n##   grid                       4.4.0      2023-11-09 [3] local\n##   gridExtra                  2.3        2017-09-09 [2] CRAN (R 4.4.0)\n##   gtable                     0.3.4      2023-08-21 [2] CRAN (R 4.4.0)\n##   gtools                     3.9.4      2022-11-27 [2] CRAN (R 4.4.0)\n##   highr                      0.10       2022-12-22 [2] CRAN (R 4.4.0)\n##   htmltools                  0.5.7      2023-11-03 [2] CRAN (R 4.4.0)\n##   htmlwidgets                1.6.2      2023-03-17 [2] CRAN (R 4.4.0)\n##   httpuv                     1.6.12     2023-10-23 [2] CRAN (R 4.4.0)\n##   httr                       1.4.7      2023-08-15 [2] CRAN (R 4.4.0)\n##   httr2                      0.2.3      2023-05-08 [2] CRAN (R 4.4.0)\n##   igraph                     1.5.1      2023-08-10 [2] CRAN (R 4.4.0)\n##   ini                        0.3.1      2018-05-20 [2] CRAN (R 4.4.0)\n##   interactiveDisplayBase     1.41.0     2023-10-24 [2] Bioconductor\n##   IRanges                    2.37.0     2023-10-24 [2] Bioconductor\n##   irlba                      2.3.5.1    2022-10-03 [2] CRAN (R 4.4.0)\n##   isoband                    0.2.7      2022-12-20 [2] CRAN (R 4.4.0)\n##   iterators                  1.0.14     2022-02-05 [2] CRAN (R 4.4.0)\n##   jquerylib                  0.1.4      2021-04-26 [2] CRAN (R 4.4.0)\n##   jsonlite                   1.8.7      2023-06-29 [2] CRAN (R 4.4.0)\n##   KEGGREST                   1.43.0     2023-10-24 [2] Bioconductor\n##   KernSmooth                 2.23-22    2023-07-10 [3] CRAN (R 4.4.0)\n##   knitr                      1.45       2023-10-30 [2] CRAN (R 4.4.0)\n##   labeling                   0.4.3      2023-08-29 [2] CRAN (R 4.4.0)\n##   lambda.r                   1.2.4      2019-09-18 [2] CRAN (R 4.4.0)\n##   later                      1.3.1      2023-05-02 [2] CRAN (R 4.4.0)\n##   lattice                    0.22-5     2023-10-24 [3] CRAN (R 4.4.0)\n##   lazyeval                   0.2.2      2019-03-15 [2] CRAN (R 4.4.0)\n##   lifecycle                  1.0.4      2023-11-07 [2] CRAN (R 4.4.0)\n##   littler                    0.3.18     2023-03-26 [2] CRAN (R 4.4.0)\n##   magrittr                   2.0.3      2022-03-30 [2] CRAN (R 4.4.0)\n##   MASS                       7.3-60.1   2023-11-09 [3] local\n##   Matrix                     1.6-2      2023-11-08 [3] CRAN (R 4.4.0)\n##   MatrixGenerics             1.15.0     2023-10-24 [2] Bioconductor\n##   matrixStats                1.1.0      2023-11-07 [2] CRAN (R 4.4.0)\n##   memoise                    2.0.1      2021-11-26 [2] CRAN (R 4.4.0)\n##   methods                  * 4.4.0      2023-11-09 [3] local\n##   mgcv                       1.9-0      2023-07-11 [3] CRAN (R 4.4.0)\n##   mia                        1.11.0     2023-10-24 [2] Bioconductor\n##   miaTime                    0.1.21     2023-11-15 [2] Github (microbiome/miaTime@9fe9771)\n##   microbiomeDataSets         1.11.0     2023-10-26 [2] Bioconductor\n##   mime                       0.12       2021-09-28 [2] CRAN (R 4.4.0)\n##   miniUI                     0.1.1.1    2018-05-18 [2] CRAN (R 4.4.0)\n##   MultiAssayExperiment       1.29.0     2023-10-24 [2] Bioconductor\n##   multtest                   2.59.0     2023-10-24 [2] Bioconductor\n##   munsell                    0.5.0      2018-06-12 [2] CRAN (R 4.4.0)\n##   nlme                       3.1-163    2023-08-09 [3] CRAN (R 4.4.0)\n##   nnet                       7.3-19     2023-05-03 [3] CRAN (R 4.4.0)\n##   numDeriv                   2016.8-1.1 2019-06-06 [2] CRAN (R 4.4.0)\n##   OMA                        0.98.16    2023-11-15 [1] Bioconductor\n##   openssl                    2.1.1      2023-09-25 [2] CRAN (R 4.4.0)\n##   parallel                   4.4.0      2023-11-09 [3] local\n##   permute                    0.9-7      2022-01-27 [2] CRAN (R 4.4.0)\n##   pheatmap                   1.0.12     2019-01-04 [2] CRAN (R 4.4.0)\n##   phyloseq                   1.47.0     2023-10-24 [2] Bioconductor\n##   pillar                     1.9.0      2023-03-22 [2] CRAN (R 4.4.0)\n##   pixmap                     0.4-12     2021-01-29 [2] CRAN (R 4.4.0)\n##   pkgbuild                   1.4.2      2023-06-26 [2] CRAN (R 4.4.0)\n##   pkgconfig                  2.0.3      2019-09-22 [2] CRAN (R 4.4.0)\n##   pkgdown                    2.0.7      2022-12-14 [2] CRAN (R 4.4.0)\n##   pkgload                    1.3.3      2023-09-22 [2] CRAN (R 4.4.0)\n##   plogr                      0.2.0      2018-03-25 [2] CRAN (R 4.4.0)\n##   plotly                     4.10.3     2023-10-21 [2] CRAN (R 4.4.0)\n##   plyr                       1.8.9      2023-10-02 [2] CRAN (R 4.4.0)\n##   png                        0.1-8      2022-11-29 [2] CRAN (R 4.4.0)\n##   posterior                  1.5.0      2023-10-31 [2] CRAN (R 4.4.0)\n##   praise                     1.0.0      2015-08-11 [2] CRAN (R 4.4.0)\n##   preprocessCore             1.65.0     2023-10-24 [2] Bioconductor\n##   prettyunits                1.2.0      2023-09-24 [2] CRAN (R 4.4.0)\n##   processx                   3.8.2      2023-06-30 [2] CRAN (R 4.4.0)\n##   profvis                    0.3.8      2023-05-02 [2] CRAN (R 4.4.0)\n##   promises                   1.2.1      2023-08-10 [2] CRAN (R 4.4.0)\n##   ps                         1.7.5      2023-04-18 [2] CRAN (R 4.4.0)\n##   purrr                      1.0.2      2023-08-10 [2] CRAN (R 4.4.0)\n##   quadprog                   1.5-8      2019-11-20 [2] CRAN (R 4.4.0)\n##   R6                         2.5.1      2021-08-19 [2] CRAN (R 4.4.0)\n##   ragg                       1.2.6      2023-10-10 [2] CRAN (R 4.4.0)\n##   rappdirs                   0.3.3      2021-01-31 [2] CRAN (R 4.4.0)\n##   rcmdcheck                  1.4.0      2021-09-27 [2] CRAN (R 4.4.0)\n##   RColorBrewer               1.1-3      2022-04-03 [2] CRAN (R 4.4.0)\n##   Rcpp                       1.0.11     2023-07-06 [2] CRAN (R 4.4.0)\n##   RcppAnnoy                  0.0.21     2023-07-02 [2] CRAN (R 4.4.0)\n##   RcppArmadillo              0.12.6.6.0 2023-11-01 [2] CRAN (R 4.4.0)\n##   RcppEigen                  0.3.3.9.4  2023-11-02 [2] CRAN (R 4.4.0)\n##   RcppGSL                    0.3.13     2023-01-13 [2] CRAN (R 4.4.0)\n##   RcppHNSW                   0.5.0      2023-09-19 [2] CRAN (R 4.4.0)\n##   RcppML                     0.3.7      2021-09-21 [2] CRAN (R 4.4.0)\n##   RcppNumerical              0.6-0      2023-09-06 [2] CRAN (R 4.4.0)\n##   RcppProgress               0.4.2      2020-02-06 [2] CRAN (R 4.4.0)\n##   RcppZiggurat               0.1.6      2020-10-20 [2] CRAN (R 4.4.0)\n##   RCurl                      1.98-1.13  2023-11-02 [2] CRAN (R 4.4.0)\n##   rebook                     1.13.0     2023-10-24 [2] Bioconductor\n##   rematch2                   2.1.2      2020-05-01 [2] CRAN (R 4.4.0)\n##   remotes                    2.4.2.1    2023-07-18 [2] CRAN (R 4.4.0)\n##   reshape2                   1.4.4      2020-04-09 [2] CRAN (R 4.4.0)\n##   rgl                        1.2.1      2023-07-06 [2] CRAN (R 4.4.0)\n##   rhdf5                      2.47.0     2023-10-24 [2] Bioconductor\n##   rhdf5filters               1.15.1     2023-11-06 [2] Bioconductor\n##   Rhdf5lib                   1.25.0     2023-10-24 [2] Bioconductor\n##   rlang                      1.1.2      2023-11-04 [2] CRAN (R 4.4.0)\n##   rmarkdown                  2.25       2023-09-18 [2] CRAN (R 4.4.0)\n##   roxygen2                   7.2.3      2022-12-08 [2] CRAN (R 4.4.0)\n##   rpart                      4.1.21     2023-10-09 [3] CRAN (R 4.4.0)\n##   rprojroot                  2.0.4      2023-11-05 [2] CRAN (R 4.4.0)\n##   RSQLite                    2.3.3      2023-11-04 [2] CRAN (R 4.4.0)\n##   rstudioapi                 0.15.0     2023-07-07 [2] CRAN (R 4.4.0)\n##   rsvd                       1.0.5      2021-04-16 [2] CRAN (R 4.4.0)\n##   Rtsne                      0.16       2022-04-17 [2] CRAN (R 4.4.0)\n##   rversions                  2.1.2      2022-08-31 [2] CRAN (R 4.4.0)\n##   S4Arrays                   1.3.0      2023-10-24 [2] Bioconductor\n##   S4Vectors                  0.41.1     2023-10-26 [2] Bioconductor\n##   sass                       0.4.7      2023-07-15 [2] CRAN (R 4.4.0)\n##   ScaledMatrix               1.11.0     2023-10-24 [2] Bioconductor\n##   scales                     1.2.1      2022-08-20 [2] CRAN (R 4.4.0)\n##   scater                     1.31.0     2023-10-24 [2] Bioconductor\n##   scuttle                    1.13.0     2023-10-24 [2] Bioconductor\n##   sessioninfo                1.2.2      2021-12-06 [2] CRAN (R 4.4.0)\n##   shiny                      1.7.5.1    2023-10-14 [2] CRAN (R 4.4.0)\n##   SingleCellExperiment       1.25.0     2023-10-24 [2] Bioconductor\n##   sitmo                      2.0.2      2021-10-13 [2] CRAN (R 4.4.0)\n##   snow                       0.4-4      2021-10-27 [2] CRAN (R 4.4.0)\n##   sourcetools                0.1.7-1    2023-02-01 [2] CRAN (R 4.4.0)\n##   sp                         2.1-1      2023-10-16 [2] CRAN (R 4.4.0)\n##   SparseArray                1.3.1      2023-11-07 [2] Bioconductor\n##   sparseMatrixStats          1.15.0     2023-10-24 [2] Bioconductor\n##   spatial                    7.3-17     2023-07-20 [3] CRAN (R 4.4.0)\n##   splines                    4.4.0      2023-11-09 [3] local\n##   stats                    * 4.4.0      2023-11-09 [3] local\n##   stats4                     4.4.0      2023-11-09 [3] local\n##   stringi                    1.8.1      2023-11-13 [2] CRAN (R 4.4.0)\n##   stringr                    1.5.1      2023-11-14 [2] CRAN (R 4.4.0)\n##   SummarizedExperiment       1.33.0     2023-10-24 [2] Bioconductor\n##   survival                   3.5-7      2023-08-14 [3] CRAN (R 4.4.0)\n##   svUnit                     1.0.6      2021-04-19 [2] CRAN (R 4.4.0)\n##   sys                        3.4.2      2023-05-23 [2] CRAN (R 4.4.0)\n##   systemfonts                1.0.5      2023-10-09 [2] CRAN (R 4.4.0)\n##   tcltk                      4.4.0      2023-11-09 [3] local\n##   tensorA                    0.36.2     2020-11-19 [2] CRAN (R 4.4.0)\n##   testthat                   3.2.0      2023-10-06 [2] CRAN (R 4.4.0)\n##   textshaping                0.3.7      2023-10-09 [2] CRAN (R 4.4.0)\n##   tibble                     3.2.1      2023-03-20 [2] CRAN (R 4.4.0)\n##   tidybayes                  3.0.6      2023-08-12 [2] CRAN (R 4.4.0)\n##   tidyr                      1.3.0      2023-01-24 [2] CRAN (R 4.4.0)\n##   tidyselect                 1.2.0      2022-10-10 [2] CRAN (R 4.4.0)\n##   tidytree                   0.4.5      2023-08-10 [2] CRAN (R 4.4.0)\n##   tinytex                    0.48       2023-10-13 [2] CRAN (R 4.4.0)\n##   tools                      4.4.0      2023-11-09 [3] local\n##   treeio                     1.27.0     2023-10-24 [2] Bioconductor\n##   TreeSummarizedExperiment   2.11.0     2023-10-24 [2] Bioconductor\n##   urlchecker                 1.0.1      2021-11-30 [2] CRAN (R 4.4.0)\n##   usethis                    2.2.2      2023-07-06 [2] CRAN (R 4.4.0)\n##   utf8                       1.2.4      2023-10-22 [2] CRAN (R 4.4.0)\n##   utils                    * 4.4.0      2023-11-09 [3] local\n##   uwot                       0.1.16     2023-06-29 [2] CRAN (R 4.4.0)\n##   vctrs                      0.6.4      2023-10-12 [2] CRAN (R 4.4.0)\n##   vegan                      2.6-4      2022-10-11 [2] CRAN (R 4.4.0)\n##   vipor                      0.4.5      2017-03-22 [2] CRAN (R 4.4.0)\n##   viridis                    0.6.4      2023-07-22 [2] CRAN (R 4.4.0)\n##   viridisLite                0.4.2      2023-05-02 [2] CRAN (R 4.4.0)\n##   waldo                      0.5.2      2023-11-02 [2] CRAN (R 4.4.0)\n##   whisker                    0.4.1      2022-12-05 [2] CRAN (R 4.4.0)\n##   withr                      2.5.2      2023-10-30 [2] CRAN (R 4.4.0)\n##   xfun                       0.41       2023-11-01 [2] CRAN (R 4.4.0)\n##   XML                        3.99-0.15  2023-11-02 [2] CRAN (R 4.4.0)\n##   xml2                       1.3.5      2023-07-06 [2] CRAN (R 4.4.0)\n##   xopen                      1.0.0      2018-09-17 [2] CRAN (R 4.4.0)\n##   xtable                     1.8-4      2019-04-21 [2] CRAN (R 4.4.0)\n##   XVector                    0.43.0     2023-10-24 [2] Bioconductor\n##   yaml                       2.3.7      2023-01-23 [2] CRAN (R 4.4.0)\n##   yulab.utils                0.1.0      2023-09-20 [2] CRAN (R 4.4.0)\n##   zip                        2.3.0      2023-04-17 [2] CRAN (R 4.4.0)\n##   zlibbioc                   1.49.0     2023-10-24 [2] Bioconductor\n##  \n##   [1] /tmp/RtmpX5VR41/Rinstb5c6a93f8\n##   [2] /usr/local/lib/R/site-library\n##   [3] /usr/local/lib/R/library\n##  \n##  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/01_intro.html",
    "href": "pages/01_intro.html",
    "title": "Preamble",
    "section": "",
    "text": "This work - Orchestrating Microbiome Analysis with Bioconductor (Lahti et al. 2021) - contributes novel methods and educational resources for microbiome data science. It aims to teach the grammar of Bioconductor workflows in the context of microbiome data science. We show through concrete examples how to use the latest developments and data analytical strategies in R/Bioconductor for the manipulation, analysis, and reproducible reporting of hierarchical, heterogeneous, and multi-modal microbiome profiling data. The data science methodology is tightly integrated with the broader R/Bioconductor ecosystem that focuses on the development of high-quality open research software for life sciences (Gentleman et al. (2004), Huber et al. (2015)). The support for modularity and interoperability is a key to efficient resource sharing and collaborative development both within and across research fields. The central data infrastructure, the SummarizedExperiment data container and its derivatives, have already been widely adopted in microbiome research, single cell sequencing, and in other fields, allowing a rapid adoption and extensions of emerging data science techniques across application domains.\n\nLahti, Leo, Sudarshan Shetty, Felix M Ernst, et al. 2021. Orchestrating Microbiome Analysis with Bioconductor [Beta Version]. microbiome.github.io/oma/.\n\nGentleman, Robert C, Vincent J Carey, Douglas M Bates, Ben Bolstad, Marcel Dettling, Sandrine Dudoit, Byron Ellis, et al. 2004. ‚ÄúBioconductor: Open Software Development for Computational Biology and Bioinformatics.‚Äù Genome Biology 5: R80.\n\nHuber, W., V. J. Carey, R. Gentleman, S. Anders, M. Carlson, B. S. Carvalho, H. C. Bravo, et al. 2015. ‚ÄúOrchestrating High-Throughput Genomic Analysis with Bioconductor.‚Äù Nature Methods 12 (2): 115‚Äì21. http://www.nature.com/nmeth/journal/v12/n2/full/nmeth.3252.html.\nWe assume that the reader is already familiar with R programming. For references and tips on introductory material for R and Bioconductor, see Chapter @ref(resources). This online resource and its associated ecosystem of microbiome data science tools are a result of a community-driven development process, and welcoming new users and contributors. You can find more information on how to find us online and join the developer community through the project homepage at microbiome.github.io.\nThe book is organized into three parts. We start by introducing the material and link to further resources for learning R and Bioconductor. We describe the key data infrastructure, the TreeSummarizedExperiment class that provides a container for microbiome data, and how to get started by loading microbiome data set in the context of this new framework. The second section, Focus Topics, covers the common steps in microbiome data analysis, beginning with the most common steps and progressing to more specialized methods in subsequent sections. Third, Workflows, provides case studies for the various datasets used throughout the book. Finally, Appendix, links to further resources and acknowledgments.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/06_packages.html#package-installation",
    "href": "pages/06_packages.html#package-installation",
    "title": "1¬† Packages",
    "section": "\n1.1 Package installation",
    "text": "1.1 Package installation\nYou can install all packages that are required to run every example in this book via the following command:\n\nremotes::install_github('js2264/OMA')\n\n\n1.1.1 Installing specific packages\nYou can install R packages of your choice with the following command line procedure.\n\n\n\n\n\n\n\nBioconductor development version requires the installation of the latest R beta version. This is primarily recommended for those who already have experience with R/Bioconductor and need access to the latest updates.\n\nBiocManager::install(\"microbiome/mia\", version=\"devel\")\n\nGithub development version provides access to the latest but potentially unstable features. This is useful when you want access to all available tools.\n\ndevtools::install_github(\"microbiome/mia\")"
  },
  {
    "objectID": "pages/06_packages.html#ecosystem",
    "href": "pages/06_packages.html#ecosystem",
    "title": "1¬† Packages",
    "section": "\n1.2 Package ecosystem",
    "text": "1.2 Package ecosystem\nMethods for (Tree)SummarizedExperiment and MultiAssayExperiment data containers are provided by multiple independent developers through R/Bioconductor packages. Some of these are listed below (tips on new packages are welcome).\n\n1.2.1 mia package family\nThe mia package family provides general methods for microbiome data wrangling, analysis and visualization.\n\n\nmia: Microbiome analysis tools (Ernst, Shetty, and Lahti 2020)\n\n\nmiaViz: Microbiome analysis specific visualization (Ernst, Borman, and Lahti 2022)\n\n\nmiaSim: Microbiome data simulations (Simsek et al. 2021)\n\n\nmiaTime: Microbiome time series analysis (Lahti 2021)\n\n\nErnst, Felix G. M., Sudarshan Shetty, and Leo Lahti. 2020. Mia: Microbiome Analysis.\n\nErnst, Felix G. M., Tuomas Borman, and Leo Lahti. 2022. miaViz: Microbiome Analysis Plotting and Visualization.\n\nSimsek, Yagmur, Leo Lahti, Daniel Garza, and Karoline Faust. 2021. ‚ÄúmiaSim r Package.‚Äù microbiome.github.io/miaSim.\n\nLahti, L. 2021. miaTime: Time Series Analysis.\n\n1.2.2 Differential abundance\nThe following DA methods support (Tree)SummarizedExperiment.\n\n\nANCOMBC for differential abundance analysis\n\nbenchdamic for benchmarking differential abundance methods\n\nALDEx2 for differential abundance analysis\n\n1.2.3 Other packages\n\n\nphilr (Silverman et al. (2017)) phylogeny-aware phILR transformation\n\nMicrobiotaProcess for ‚Äútidy‚Äù analysis of microbiome and other ecological data\n\nTools for Microbiome Analysis site listed over 130 R packages for microbiome data science in\n\nMany of these are not in Bioconductor, or do not directly support the data containers used in this book but can be often used with minor modifications. The phyloseq-based tools can be used by converting the TreeSE data into phyloseq with makePhyloseqFromTreeSummarizedExperiment.\n\n\n\nSilverman, Justin D, Alex D Washburne, Sayan Mukherjee, and Lawrence A David. 2017. ‚ÄúA Phylogenetic Transform Enhances Analysis of Compositional Microbiota Data.‚Äù eLife 6. https://doi.org/10.7554/eLife.21887.\n\n1.2.4 Open microbiome data\nHundreds of published microbiome data sets are readily available in these data containers (see @ref(example-data))."
  },
  {
    "objectID": "pages/04_containers.html#data-science-framework",
    "href": "pages/04_containers.html#data-science-framework",
    "title": "2¬† Microbiome Data",
    "section": "\n2.1 Data science framework",
    "text": "2.1 Data science framework\nThe building blocks of the framework are data container (SummarizedExperiment and its derivatives), packages from various developers using the TreeSE container, open demonstration data sets, in a separate chapter @ref(example-data), and online tutorials including this online book as well as the various package vignettes and other materials."
  },
  {
    "objectID": "pages/04_containers.html#data-containers",
    "href": "pages/04_containers.html#data-containers",
    "title": "2¬† Microbiome Data",
    "section": "\n2.2 Data containers",
    "text": "2.2 Data containers\nSummarizedExperiment (SE) (Morgan et al. 2020) is a generic and highly optimized container for complex data structures. It has become a common choice for analysing various types of biomedical profiling data, such as RNAseq, ChIp-Seq, microarrays, flow cytometry, proteomics, and single-cell sequencing.\n\nMorgan, Martin, Valerie Obenchain, Jim Hester, and Herv√© Pag√®s. 2020. SummarizedExperiment: SummarizedExperiment Container. https://bioconductor.org/packages/SummarizedExperiment.\n\nHuang, Ruizhu. 2020. TreeSummarizedExperiment: A S4 Class for Data with Tree Structures.\n[TreeSummarizedExperiment] (TreeSE) (Huang 2020) was developed as an extension to incorporate hierarchical information (such as phylogenetic trees and sample hierarchies) and reference sequences.\n[MultiAssayExperiment] (MAE) (Ramos et al. 2017) provides an organized way to bind several different data containers together in a single object. For example, we can bind microbiome data (in TreeSE container) with metabolomic profiling data (in SE) container, with (partially) shared sample metadata. This is convenient and robust for instance in subsetting and other data manipulation tasks. Microbiome data can be part of multiomics experiments and analysis strategies. We highlight how the methods used througout in this book relate to this data framework by using the TreeSummarizedExperiment, MultiAssayExperiment, and classes beyond.\nThis section provides an introductions to these data containers. In microbiome data science, these containers link taxonomic abundance tables with rich side information on the features and samples. Taxonomic abundance data can be obtained by 16S rRNA amplicon or metagenomic sequencing, phylogenetic microarrays, or by other means. Many microbiome experiments include multiple versions and types of data generated independently or derived from each other through transformation or agglomeration. We start by providing recommendations on how to represent different varieties of multi-table data within the TreeSummarizedExperiment class.\nThe options and recommendations are summarized in Table @ref(tab:options).\n\n2.2.1 Assay data\nThe original count-based taxonomic abundance tables may have different transformations, such as logarithmic, Centered Log-Ratio (CLR), or relative abundance. These are typically stored in assays.\nLet us load example data and rename it as tse.\n\nlibrary(mia)\ndata(\"hitchip1006\", package = \"miaTime\")\ntse &lt;- hitchip1006\n\nThe assays slot contains the experimental data as multiple count matrices. The result of assays is a list of matrices.\n\nassays(tse)\n##  List of length 1\n##  names(1): counts\n\nIndividual assays can be accessed via assay\n\nassay(tse, \"counts\")[1:5,1:7]\n##                               Sample-1 Sample-2 Sample-3 Sample-4 Sample-5\n##  Actinomycetaceae                    0        0        0        0        0\n##  Aerococcus                          0        0        0        0        0\n##  Aeromonas                           0        0        0        0        0\n##  Akkermansia                        21       36      475       61       34\n##  Alcaligenes faecalis et rel.        1        1        1        2        1\n##                               Sample-6 Sample-7\n##  Actinomycetaceae                    0        0\n##  Aerococcus                          0        0\n##  Aeromonas                           0        0\n##  Akkermansia                        14       27\n##  Alcaligenes faecalis et rel.        1        1\n\nTo illustrate the use of multiple assays, the relative abundance data can be calculated and stored along the original count data using transformAssay.\n\ntse &lt;- transformAssay(tse, assay.type = \"counts\", method = \"relabundance\")\nassays(tse)\n##  List of length 2\n##  names(2): counts relabundance\n\nNow there are two assays available in the tse object, counts and relabundance.\n\nassay(tse, \"relabundance\")[1:5,1:7]\n##                                Sample-1  Sample-2  Sample-3  Sample-4\n##  Actinomycetaceae             0.0000000 0.000e+00 0.0000000 0.0000000\n##  Aerococcus                   0.0000000 0.000e+00 0.0000000 0.0000000\n##  Aeromonas                    0.0000000 0.000e+00 0.0000000 0.0000000\n##  Akkermansia                  0.0027657 3.547e-03 0.0666106 0.0056195\n##  Alcaligenes faecalis et rel. 0.0001317 9.854e-05 0.0001402 0.0001842\n##                                Sample-5  Sample-6  Sample-7\n##  Actinomycetaceae             0.000e+00 0.0000000 0.0000000\n##  Aerococcus                   0.000e+00 0.0000000 0.0000000\n##  Aeromonas                    0.000e+00 0.0000000 0.0000000\n##  Akkermansia                  2.833e-03 0.0017690 0.0045570\n##  Alcaligenes faecalis et rel. 8.333e-05 0.0001264 0.0001688\n\nHere the dimension of the count data remains unchanged in transformation. This is in fact, a requirement for the assays.\n\n2.2.2 colData\ncolData contains data on the samples.\n\ncolData(tse)\n##  DataFrame with 1151 rows and 10 columns\n##                    age      sex nationality DNA_extraction_method  project\n##              &lt;integer&gt; &lt;factor&gt;    &lt;factor&gt;              &lt;factor&gt; &lt;factor&gt;\n##  Sample-1           28   male            US                    NA        1\n##  Sample-2           24   female          US                    NA        1\n##  Sample-3           52   male            US                    NA        1\n##  Sample-4           22   female          US                    NA        1\n##  Sample-5           25   female          US                    NA        1\n##  ...               ...      ...         ...                   ...      ...\n##  Sample-1168        50   female Scandinavia                     r       40\n##  Sample-1169        31   female Scandinavia                     r       40\n##  Sample-1170        31   female Scandinavia                     r       40\n##  Sample-1171        52   male   Scandinavia                     r       40\n##  Sample-1172        52   male   Scandinavia                     r       40\n##              diversity   bmi_group  subject      time      sample\n##              &lt;numeric&gt;    &lt;factor&gt; &lt;factor&gt; &lt;numeric&gt; &lt;character&gt;\n##  Sample-1         5.76 severeobese        1         0    Sample-1\n##  Sample-2         6.06 obese              2         0    Sample-2\n##  Sample-3         5.50 lean               3         0    Sample-3\n##  Sample-4         5.87 underweight        4         0    Sample-4\n##  Sample-5         5.89 lean               5         0    Sample-5\n##  ...               ...         ...      ...       ...         ...\n##  Sample-1168      5.87 severeobese      244       8.1 Sample-1168\n##  Sample-1169      5.87 overweight       245       2.3 Sample-1169\n##  Sample-1170      5.92 overweight       245       8.2 Sample-1170\n##  Sample-1171      6.04 overweight       246       2.1 Sample-1171\n##  Sample-1172      5.74 overweight       246       7.9 Sample-1172\n\n\n2.2.3 rowData\nrowData contains data on the features of the analyzed samples. Of particular interest to the microbiome field, this is used to store taxonomic information.\n\nrowData(tse)\n##  DataFrame with 130 rows and 3 columns\n##                                        Phylum          Family\n##                                   &lt;character&gt;     &lt;character&gt;\n##  Actinomycetaceae              Actinobacteria  Actinobacteria\n##  Aerococcus                        Firmicutes         Bacilli\n##  Aeromonas                     Proteobacteria  Proteobacteria\n##  Akkermansia                  Verrucomicrobia Verrucomicrobia\n##  Alcaligenes faecalis et rel.  Proteobacteria  Proteobacteria\n##  ...                                      ...             ...\n##  Vibrio                        Proteobacteria  Proteobacteria\n##  Weissella et rel.                 Firmicutes         Bacilli\n##  Wissella et rel.                  Firmicutes         Bacilli\n##  Xanthomonadaceae              Proteobacteria  Proteobacteria\n##  Yersinia et rel.              Proteobacteria  Proteobacteria\n##                                                Genus\n##                                          &lt;character&gt;\n##  Actinomycetaceae                   Actinomycetaceae\n##  Aerococcus                               Aerococcus\n##  Aeromonas                                 Aeromonas\n##  Akkermansia                             Akkermansia\n##  Alcaligenes faecalis et rel. Alcaligenes faecalis..\n##  ...                                             ...\n##  Vibrio                                       Vibrio\n##  Weissella et rel.                 Weissella et rel.\n##  Wissella et rel.                   Wissella et rel.\n##  Xanthomonadaceae                   Xanthomonadaceae\n##  Yersinia et rel.                   Yersinia et rel.\n\n\n2.2.4 rowTree\nPhylogenetic trees also play an important role in the microbiome field. The TreeSummarizedExperiment class can keep track of features and node relations via two functions, rowTree and rowLinks.\nA tree can be accessed via rowTree as phylo object.\n\nrowTree(tse)\n##  NULL\n\nThe links to the individual features are available through rowLinks.\n\nrowLinks(tse)\n##  NULL\n\nPlease note that there can be a 1:1 relationship between tree nodes and features, but this is not a must-have. This means there can be features, which are not linked to nodes, and nodes, which are not linked to features. To change the links in an existing object, the changeTree function is available.\n\n2.2.5 Alternative experiments\nAlternative experiments complement assays. They can contain complementary data, which is no longer tied to the same dimensions as the assay data. However, the number of samples (columns) must be the same.\nThis can come into play, for instance, when one has taxonomic abundance profiles quantified with different measurement technologies, such as phylogenetic microarrays, amplicon sequencing, or metagenomic sequencing. Another common use case is including abundance tables for different taxonomic ranks. Such alternative experiments concerning the same set of samples can be stored as\n\nSeparate assays assuming that the taxonomic information can be mapped between features directly 1:1; or\nData in the altExp slot of the TreeSummarizedExperiment, if the feature dimensions differ. Each element of the altExp slot is a SummarizedExperiment or an object from a derived class with independent feature data.\n\nThe following shows how to store taxonomic abundance tables agglomerated at different taxonomic levels. However, the data could as well originate from entirely different measurement sources as long as the samples match.\nLet us first agglomerate the data to Phylum level. This yields a new TreeSE data object.\n\ntse_phylum &lt;- mergeFeaturesByRank(tse, \"Phylum\", na.rm=TRUE)\n# Both have the same number of columns (samples)\ndim(tse)\n##  [1]  130 1151\ndim(tse_phylum)\n##  [1]    8 1151\n\nThen we can add the new phylum-level data object as an alternative experiment in the original data.\n\n# Add the new data object to the original data object as an alternative experiment with the name \"Phylum\"\naltExp(tse, \"Phylum\") &lt;- tse_phylum\n\n# Check the alternative experiment names available in the data\naltExpNames(tse)\n##  [1] \"Phylum\"\n\nWe can now subset the data, for instance, and this acts on both altExp and assay data.\n\ntse[,1:10]\n##  class: TreeSummarizedExperiment \n##  dim: 130 10 \n##  metadata(0):\n##  assays(2): counts relabundance\n##  rownames(130): Actinomycetaceae Aerococcus ... Xanthomonadaceae\n##    Yersinia et rel.\n##  rowData names(3): Phylum Family Genus\n##  colnames(10): Sample-1 Sample-2 ... Sample-9 Sample-10\n##  colData names(10): age sex ... time sample\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(1): Phylum\n##  rowLinks: NULL\n##  rowTree: NULL\n##  colLinks: NULL\n##  colTree: NULL\ndim(altExp(tse[,1:10],\"Phylum\"))\n##  [1]  8 10\n\nFor more details on altExp, you can check the introduction to the SingleCellExperiment package (Lun and Risso 2020).\n\nLun, Aaron, and Davide Risso. 2020. SingleCellExperiment: S4 Classes for Single Cell Data.\n\n2.2.6 MultiAssayExperiments\nMultiple experiments relate to complementary measurement types, such as transcriptomic or metabolomic profiling of the microbiome or the host. Multiple experiments can be represented using the same options as alternative experiments, or by using the MultiAssayExperiment class (Ramos et al. 2017). Depending on how the datasets relate to each other the data can be stored as:\n\nRamos, Marcel, Lucas Schiffer, Angela Re, Rimsha Azhar, Azfar Basunia, Carmen Rodriguez Cabrera, Tiffany Chan, et al. 2017. ‚ÄúSoftware for the Integration of Multiomics Experiments in Bioconductor.‚Äù Cancer Research. https://doi.org/10.1158/0008-5472.CAN-17-0344.\n\nSeparate altExp if the samples can be matched directly 1:1; or\nAs MultiAssayExperiment objects, in which the connections between samples are defined through a sampleMap. Each element on the experimentsList of an MultiAssayExperiment is matrix or matrix-like objects, including SummarizedExperiment objects, and the number of samples can differ between the elements.\n\nFor information have a look at the intro vignette of the MultiAssayExperiment package.\n\n(#tab:options) Recommended options for storing multiple data tables in microbiome studies The assays are best suited for data transformations (one-to-one match between samples and columns across the assays). The alternative experiments are particularly suitable for alternative versions of the data that are of same type but may have a different number of features (e.g.¬†taxonomic groups); this is for instance the case with taxonomic abundance tables agglomerated at different levels (e.g.¬†genus vs.¬†phyla) or alternative profiling technologies (e.g.¬†amplicon sequencing vs.¬†shallow shotgun metagenomics). For alternative experiments one-to-one match between samples (cols) is libraryd but the alternative experiment tables can have different numbers of features (rows). Finally, elements of the MultiAssayExperiment provide the most flexible way to incorporate multi-omic data tables with flexible numbers of samples and features. We recommend these conventions as the basis for methods development and application in microbiome studies.\n\nOption\nRows (features)\nCols (samples)\nRecommended\n\n\n\nassays\nmatch\nmatch\nData transformations\n\n\naltExp\nfree\nmatch\nAlternative experiments\n\n\nMultiAssay\nfree\nfree (mapping)\nMulti-omic experiments"
  },
  {
    "objectID": "pages/04_containers.html#example-data",
    "href": "pages/04_containers.html#example-data",
    "title": "2¬† Microbiome Data",
    "section": "\n2.3 Demonstration data",
    "text": "2.3 Demonstration data\nOpen demonstration data for testing and benchmarking purposes is available from multiple locations. This chapter introduces some options. The other chapters of this book provide ample examples about the use of the data.\n\n2.3.1 Package data\nThe mia R package contains example datasets that are direct conversions from the alternative phyloseq container to the TreeSummarizedExperiment container.\nList the available datasets in the mia package:\n\nlibrary(mia)\ndata(package=\"mia\")\n\nLoad the GlobalPatterns data from the mia package:\n\ndata(\"GlobalPatterns\", package=\"mia\")\nGlobalPatterns\n##  class: TreeSummarizedExperiment \n##  dim: 19216 26 \n##  metadata(0):\n##  assays(1): counts\n##  rownames(19216): 549322 522457 ... 200359 271582\n##  rowData names(7): Kingdom Phylum ... Genus Species\n##  colnames(26): CL3 CC1 ... Even2 Even3\n##  colData names(7): X.SampleID Primer ... SampleType Description\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: a LinkDataFrame (19216 rows)\n##  rowTree: 1 phylo tree(s) (19216 leaves)\n##  colLinks: NULL\n##  colTree: NULL\n\n\n2.3.1.1 Tengeler2020\nTengeler2020 is derived from a randomised blinded study on the effects of gut microbiome on attention-deficit/hyperactivity disorder (ADHD) in humanised mice (C Tengeler et al. 2020). The dataset is briefly presented in these slides.\n\nC Tengeler, Anouk, Sarita A Dam, Maximilian Wiesmann, Jilly Naaijen, Miranda van Bodegom, Clara Belzer, Pieter J Dederen, et al. 2020. ‚ÄúGut Microbiota from Persons with Attention-Deficit/Hyperactivity Disorder Affects the Brain in Mice.‚Äù Microbiome 8: 1‚Äì14. https://doi.org/10.1186/s40168-020-00816-x.\n\n2.3.1.2 HintikkaXOData\nHintikkaXOData is derived from a study about the effects of fat diet and prebiotics on the microbiome of rat models (Hintikka et al. 2021). It is available in the MAE data container for R. The dataset is briefly summarized in these slides.\n\nHintikka, Jukka, Sanna Lensu, Elina M√§kinen, Sira Karvinen, Marjaana Honkanen, Jere Lind√©n, Tim Garrels, Satu Pekkala, and Leo Lahti. 2021. ‚ÄúXylo-Oligosaccharides in Prevention of Hepatic Steatosis and Adipose Tissue Inflammation: Associating Taxonomic and Metabolomic Patterns in Fecal Microbiomes with Biclustering.‚Äù International Journal of Environmental Research and Public Health 18 (8): 4049.\n\n2.3.2 ExperimentHub data\nExperimentHub provides a variety of data resources, including the microbiomeDataSets package (Morgan and Shepherd 2021; Lahti, Ernst, and Shetty 2021).\n\nMorgan, Martin, and Lori Shepherd. 2021. ExperimentHub: Client to Access ExperimentHub Resources.\n\nLahti, Leo, Felix G. M. Ernst, and Sudarshan Shetty. 2021. microbiomeDataSets: Experiment Hub Based Microbiome Datasets.\nA table of the available datasets is available through the availableDataSets function.\n\nlibrary(microbiomeDataSets)\navailableDataSets()\n##              Dataset\n##  1  GrieneisenTSData\n##  2    HintikkaXOData\n##  3       LahtiMLData\n##  4        LahtiMData\n##  5       LahtiWAData\n##  6      OKeefeDSData\n##  7 SilvermanAGutData\n##  8        SongQAData\n##  9   SprockettTHData\n\nAll data are downloaded from ExperimentHub and cached for local re-use. Check the man pages of each function for a detailed documentation of the data contents and references. Let us retrieve a MultiAssayExperiment dataset:\n\n# mae &lt;- HintikkaXOData()\n# Since HintikkaXOData is now added to mia, we can load it directly from there\n# We suggest to check other datasets from microbiomeDataSets\ndata(HintikkaXOData, package = \"mia\")\nmae &lt;- HintikkaXOData\n\nData is available in SummarizedExperiment, r Biocpkg(\"TreeSummarizedExperiment\") and r Biocpkg(\"MultiAssayExperiment\") data containers; see the separate page on alternative containers for more details.\n\n2.3.3 Curated metagenomic data\ncuratedMetagenomicData is a large collection of curated human microbiome datasets, provided as (Tree)SummarizedExperiment objects (Pasolli et al. 2017). The resource provides curated human microbiome data including gene families, marker abundance, marker presence, pathway abundance, pathway coverage, and relative abundance for samples from different body sites. See the package homepage for more details on data availability and access.\n\nPasolli, E, L Schiffer, P Manghi, A Renson, V Obenchain, D Truong, F Beghini, et al. 2017. ‚ÄúAccessible, Curated Metagenomic Data Through ExperimentHub.‚Äù Nature Methods 14: 1023‚Äì24. https://doi.org/10.1038/nmeth.4468.\n\nVatanen, Tommi, Aleksandar D. Kostic, Eva d‚ÄôHennezel, Heli Siljander, Eric A. Franzosa, Moran Yassour, Raivo Kolde, et al. 2016. ‚ÄúVariation in Microbiome LPS Immunogenicity Contributes to Autoimmunity in Humans.‚Äù Cell 165 (May): 842‚Äì53. https://doi.org/10.1016/j.cell.2016.04.007.\nAs one example, let us retrieve the Vatanen (2016) (Vatanen et al. 2016) data set. This is a larger collection with a bit longer download time.\n\nlibrary(curatedMetagenomicData)\ntse &lt;- curatedMetagenomicData(\"Vatanen*\", dryrun = FALSE, counts = TRUE)\n\n\n2.3.4 Other data sources\nThe current collections provide access to vast microbiome data resources. The output has to be converted into TreeSE/MAE separately.\n\n\nMGnifyR provides access to EBI/MGnify\n\n\nqiitr provides access to QIITA"
  },
  {
    "objectID": "pages/04_containers.html#loading-experimental-microbiome-data",
    "href": "pages/04_containers.html#loading-experimental-microbiome-data",
    "title": "2¬† Microbiome Data",
    "section": "\n2.4 Loading experimental microbiome data",
    "text": "2.4 Loading experimental microbiome data\n\n2.4.1 16S workflow\nResult of amplicon sequencing is a large number of files that include all the sequences that were read from samples. Those sequences need to be matched with taxa. Additionally, we need to know how many times each taxa were found from each sample.\nThere are several algorithms to do that, and DADA2 is one of the most common. You can find DADA2 pipeline tutorial, for example, here. After the DADA2 portion of the tutorial is completed, the data is stored into phyloseq object (Bonus: Handoff to phyloseq). To store the data to TreeSummarizedExperiment, follow the example below.\nYou can find full workflow script without further explanations and comments from here\nLoad required packages.\n\nlibrary(mia)\nlibrary(ggplot2)\nlibrary(BiocManager)\nlibrary(Biostrings)\n\nCreate arbitrary example sample metadata like it was done in the tutorial. Usually, sample metadata is imported as a file.\n\nsamples.out &lt;- rownames(seqtab.nochim)\nsubject &lt;- sapply(strsplit(samples.out, \"D\"), `[`, 1)\ngender &lt;- substr(subject,1,1)\nsubject &lt;- substr(subject,2,999)\nday &lt;- as.integer(sapply(strsplit(samples.out, \"D\"), `[`, 2))\nsamdf &lt;- data.frame(Subject=subject, Gender=gender, Day=day)\nsamdf$When &lt;- \"Early\"\nsamdf$When[samdf$Day&gt;100] &lt;- \"Late\"\nrownames(samdf) &lt;- samples.out\n\nConvert data into right format and create a TreeSE object.\n\n# Create a list that contains assays\ncounts &lt;- t(seqtab.nochim)\ncounts &lt;- as.matrix(counts)\nassays &lt;- SimpleList(counts = counts)\n\n# Convert colData and rowData into DataFrame\nsamdf &lt;- DataFrame(samdf)\ntaxa &lt;- DataFrame(taxa)\n\n# Create TreeSE\ntse &lt;- TreeSummarizedExperiment(assays = assays,\n                                colData = samdf,\n                                rowData = taxa\n                                )\n\n# Remove mock sample like it is also done in DADA2 pipeline tutorial\ntse &lt;- tse[ , colnames(tse) != \"mock\"]\n\nAdd sequences into referenceSeq slot and convert rownames into simpler format.\n\n# Convert sequences into right format\ndna &lt;- Biostrings::DNAStringSet( rownames(tse) )\n# Add sequences into referenceSeq slot\nreferenceSeq(tse) &lt;- dna\n# Convert rownames into ASV_number format\nrownames(tse) &lt;- paste0(\"ASV\", seq( nrow(tse) ))\ntse\n##  class: TreeSummarizedExperiment \n##  dim: 232 20 \n##  metadata(0):\n##  assays(1): counts\n##  rownames(232): ASV1 ASV2 ... ASV231 ASV232\n##  rowData names(7): Kingdom Phylum ... Genus Species\n##  colnames(20): F3D0 F3D1 ... F3D9 Mock\n##  colData names(4): Subject Gender Day When\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: NULL\n##  rowTree: NULL\n##  colLinks: NULL\n##  colTree: NULL\n##  referenceSeq: a DNAStringSet (232 sequences)\n\n\n2.4.2 Import from external files\nMicrobiome (taxonomic) profiling data is commonly distributed in various file formats. You can import such external data files as a (Tree)SummarizedExperiment object, but the details depend on the file format. Here, we provide examples for common formats. Some datasets and raw files to learn how to import raw data and construct TreeSE/MAE containers are available in the microbiome data repository.\n\n2.4.2.1 CSV import\nCSV data tables can be imported with the standard R functions, then converted to the desired format. For detailed examples, you can check the Bioconductor course material by Martin Morgan. You can also check the example files and construct your own CSV files accordingly.\nRecommendations for the CSV files are the following. File names are arbitrary; we refer here to the same names as in the examples:\n\nAbundance table (assay_taxa.csv): data matrix (features x samples); first column provides feature IDs, the first row provides sample IDs; other values should be numeric (abundances).\nRow data (rowdata_taxa.csv): data table (features x info); first column provides feature IDs, the first row provides column headers; this file usually contains the taxonomic mapping between different taxonomic levels. Ideally, the feature IDs (row names) match one-to-one with the abundance table row names.\nColumn data (coldata.csv): data table (samples x info); first column provides sample IDs, the first row provides column headers; this file usually contains the sample metadata/phenodata (such as subject age, health etc). Ideally, the sample IDs match one-to-one with the abundance table column names.\n\nAfter you have set up the CSV files, you can read them in R:\n\ncount_file  &lt;- system.file(\"extdata\", \"assay_taxa.csv\", package = \"OMA\")\ntax_file    &lt;- system.file(\"extdata\", \"rowdata_taxa.csv\", package = \"OMA\")\nsample_file &lt;- system.file(\"extdata\", \"coldata.csv\", package = \"OMA\")\n\n# Load files\ncounts  &lt;- read.csv(count_file, row.names=1)   # Abundance table (e.g. ASV data; to assay data)\ntax     &lt;- read.csv(tax_file, row.names=1)     # Taxonomy table (to rowData)\nsamples &lt;- read.csv(sample_file, row.names=1)  # Sample data (to colData)\n\nAfter reading the data in R, ensure the following:\n\nabundance table (counts): numeric matrix, with feature IDs as rownames and sample IDs as column names\nrowdata (tax): DataFrame, with feature IDs as rownames. If this is a data.frame you can use the function DataFrame() to change the format. Column names are free but in microbiome analysis they usually they refer to taxonomic ranks. The rownames in rowdata should match with rownames in abundance table.\ncoldata (samples): DataFrame, with sample IDs as rownames. If this is a data.frame you can use the function DataFrame() to change the format. Column names are free. The rownames in coldata should match with colnames in abundance table.\n\nAlways ensure that the tables have rownames! The TreeSE constructor compares rownames and ensures that, for example, right samples are linked with right patient.\nAlso ensure that the row and column names match one-to-one between abundance table, rowdata, and coldata:\n\n# Match rows and columns\ncounts &lt;- counts[rownames(tax), rownames(samples)]\n\n# Let us ensure that the data is in correct (numeric matrix) format:\ncounts &lt;- as.matrix(counts)\n\nIf you hesitate about the format of the data, you can compare to one of the available demonstration datasets, and make sure that your data components have the same format.\nThere are many different source files and many different ways to read data in R. One can do data manipulation in R as well. Investigate the entries as follows.\n\n# coldata rownames match assay colnames\nall(rownames(samples) == colnames(counts)) # our dataset\n##  [1] TRUE\nclass(samples) # should be data.frame or DataFrame\n##  [1] \"data.frame\"\n\n# rowdata rownames match assay rownames\nall(rownames(tax) == rownames(counts)) # our dataset\n##  [1] TRUE\nclass(tax) # should be data.frame or DataFrame\n##  [1] \"data.frame\"\n\n# Counts \nclass(counts) # should be a numeric matrix\n##  [1] \"matrix\" \"array\"\n\n\n2.4.3 Constructing TreeSummarizedExperiment\nNow let us create the TreeSE object from the input data tables. Here we also convert the data objects in their preferred formats:\n\ncounts ‚Äì&gt; numeric matrix\nrowData ‚Äì&gt; DataFrame\ncolData ‚Äì&gt; DataFrame\n\nThe SimpleList could be used to include multiple alternative assays, if necessary.\n\n# Create a TreeSE\ntse_taxa &lt;- TreeSummarizedExperiment(assays =  SimpleList(counts = counts),\n                                     colData = DataFrame(samples),\n                                     rowData = DataFrame(tax))\n\ntse_taxa\n##  class: TreeSummarizedExperiment \n##  dim: 12706 40 \n##  metadata(0):\n##  assays(1): counts\n##  rownames(12706): GAYR01026362.62.2014 CVJT01000011.50.2173 ...\n##    JRJTB:03787:02429 JRJTB:03787:02478\n##  rowData names(7): Phylum Class ... Species OTU\n##  colnames(40): C1 C2 ... C39 C40\n##  colData names(6): Sample Rat ... Fat XOS\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: NULL\n##  rowTree: NULL\n##  colLinks: NULL\n##  colTree: NULL\n\nNow you should have a ready-made TreeSE data object that can be used in downstream analyses.\n\n2.4.4 Constructing MultiAssayExperiment\nTo construct a MultiAssayExperiment object, just combine multiple TreeSE data containers. Here we import metabolite data from the same study.\n\ncount_file &lt;- system.file(\"extdata\", \"assay_metabolites.csv\", package = \"OMA\")\nsample_file &lt;- system.file(\"extdata\", \"coldata.csv\", package = \"OMA\")\n\n# Load files\ncounts  &lt;- read.csv(count_file, row.names=1)  \nsamples &lt;- read.csv(sample_file, row.names=1)\n\n# Create a TreeSE for the metabolite data\ntse_metabolite &lt;- TreeSummarizedExperiment(assays = SimpleList(concs = as.matrix(counts)),\n                                           colData = DataFrame(samples))\n\ntse_metabolite\n##  class: TreeSummarizedExperiment \n##  dim: 38 40 \n##  metadata(0):\n##  assays(1): concs\n##  rownames(38): Butyrate Acetate ... Malonate 1,3-dihydroxyacetone\n##  rowData names(0):\n##  colnames(40): C1 C2 ... C39 C40\n##  colData names(6): Sample Rat ... Fat XOS\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: NULL\n##  rowTree: NULL\n##  colLinks: NULL\n##  colTree: NULL\n\nNow we can combine these two experiments into MAE.\n\n# Create an ExperimentList that includes experiments\nexperiments &lt;- ExperimentList(microbiome = tse_taxa, \n                              metabolite = tse_metabolite)\n\n# Create a MAE\nmae &lt;- MultiAssayExperiment(experiments = experiments)\n\nmae\n##  A MultiAssayExperiment object of 2 listed\n##   experiments with user-defined names and respective classes.\n##   Containing an ExperimentList class object of length 2:\n##   [1] microbiome: TreeSummarizedExperiment with 12706 rows and 40 columns\n##   [2] metabolite: TreeSummarizedExperiment with 38 rows and 40 columns\n##  Functionality:\n##   experiments() - obtain the ExperimentList instance\n##   colData() - the primary/phenotype DataFrame\n##   sampleMap() - the sample coordination DataFrame\n##   `$`, `[`, `[[` - extract colData columns, subset, or experiment\n##   *Format() - convert into a long or wide DataFrame\n##   assays() - convert ExperimentList to a SimpleList of matrices\n##   exportClass() - save data to flat files\n\n\n2.4.5 Import functions for standard formats\nSpecific import functions are provided for:\n\nBiom files (see help(mia::loadFromBiom))\nQIIME2 files (see help(mia::loadFromQIIME2))\nMothur files (see help(mia::loadFromMothur))\n\n\n2.4.5.1 Biom import\nHere we show how Biom files are imported into a TreeSE object using as an example Tengeler2020, which is further described in section @ref(tengeler-desc). This dataset consists of 3 files, which can be fetched or downloaded from this repository:\n\nbiom file: abundance table and taxonomy information\ncsv file: sample metadata\ntree file: phylogenetic tree\n\nTo begin with, we store the data in a local directory within the working directory, such as data/, and define the source file paths.\n\nbiom_file_path &lt;- system.file(\"extdata\", \"Aggregated_humanization2.biom\", package = \"OMA\")\nsample_meta_file_path &lt;- system.file(\"extdata\", \"Mapping_file_ADHD_aggregated.csv\", package = \"OMA\")\ntree_file_path &lt;- system.file(\"extdata\", \"Data_humanization_phylo_aggregation.tre\", package = \"OMA\")\n\nNow we can read in the biom file and convert it into a TreeSE object. In addition, we retrieve the rank names from the prefixes of the feature names and then remove them with the rankFromPrefix and removeTaxaPrefixes optional arguments.\n\nlibrary(mia)\n\n# read biom and convert it to TreeSE\ntse &lt;- loadFromBiom(biom_file_path,\n                    rankFromPrefix = TRUE,\n                    removeTaxaPrefixes = TRUE)\n\n# Check\ntse\n##  class: TreeSummarizedExperiment \n##  dim: 151 27 \n##  metadata(0):\n##  assays(1): counts\n##  rownames(151): 1726470 1726471 ... 17264756 17264757\n##  rowData names(6): taxonomy1 Phylum ... Family Genus\n##  colnames(27): A110 A111 ... A38 A39\n##  colData names(0):\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: NULL\n##  rowTree: NULL\n##  colLinks: NULL\n##  colTree: NULL\n\nThe assays slot includes a list of abundance tables. The imported abundance table is named as ‚Äúcounts‚Äù. Let us inspect only the first cols and rows.\n\nassay(tse, \"counts\")[1:3, 1:3]\n##            A110  A111  A12\n##  1726470  17722 11630    0\n##  1726471  12052     0 2679\n##  17264731     0   970    0\n\nThe rowdata includes taxonomic information from the biom file. The head() command shows just the beginning of the data table for an overview.\nknitr::kable() helps print the information more nicely.\n\nhead(rowData(tse))\n##  DataFrame with 6 rows and 6 columns\n##             taxonomy1          Phylum            Class              Order\n##           &lt;character&gt;     &lt;character&gt;      &lt;character&gt;        &lt;character&gt;\n##  1726470    \"Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  1726471    \"Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  17264731   \"Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  17264726   \"Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  1726472    \"Bacteria Verrucomicrobia Verrucomicrobiae Verrucomicrobiales\n##  17264724   \"Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##                        Family            Genus\n##                   &lt;character&gt;      &lt;character&gt;\n##  1726470       Bacteroidaceae     Bacteroides\"\n##  1726471       Bacteroidaceae     Bacteroides\"\n##  17264731  Porphyromonadaceae Parabacteroides\"\n##  17264726      Bacteroidaceae     Bacteroides\"\n##  1726472  Verrucomicrobiaceae     Akkermansia\"\n##  17264724      Bacteroidaceae     Bacteroides\"\n\nWe further polish the feature names by removing unnecessary characters and then replace the original rowData with its updated version.\n\n# Genus level has additional '\\\"', so let's delete that also\nrowdata_modified &lt;- BiocParallel::bplapply(rowData(tse), \n                                           FUN = stringr::str_remove, \n                                           pattern = '\\\"')\n\n# rowdata_modified is a list, so convert this back to DataFrame format. \n# and assign the cleaned data back to the TSE rowData\nrowData(tse) &lt;- DataFrame(rowdata_modified)\n\n# Now we have a nicer table\nhead(rowData(tse))\n##  DataFrame with 6 rows and 6 columns\n##             taxonomy1          Phylum            Class              Order\n##           &lt;character&gt;     &lt;character&gt;      &lt;character&gt;        &lt;character&gt;\n##  1726470     Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  1726471     Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  17264731    Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  17264726    Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##  1726472     Bacteria Verrucomicrobia Verrucomicrobiae Verrucomicrobiales\n##  17264724    Bacteria   Bacteroidetes      Bacteroidia      Bacteroidales\n##                        Family           Genus\n##                   &lt;character&gt;     &lt;character&gt;\n##  1726470       Bacteroidaceae     Bacteroides\n##  1726471       Bacteroidaceae     Bacteroides\n##  17264731  Porphyromonadaceae Parabacteroides\n##  17264726      Bacteroidaceae     Bacteroides\n##  1726472  Verrucomicrobiaceae     Akkermansia\n##  17264724      Bacteroidaceae     Bacteroides\n\nWe notice that the imported biom file did not contain any colData yet, so only an empty dataframe appears in this slot.\n\nhead(colData(tse))\n##  DataFrame with 6 rows and 0 columns\n\nLet us add colData from the sample metadata, which is stored in a CSV file.\n\n# CSV file with colnames in the first row and rownames in the first column\nsample_meta &lt;- read.csv(sample_meta_file_path,\n                        sep = \",\", row.names = 1)\n\n# Add this sample data to colData of the taxonomic data object\n# Note that the data must be given in a DataFrame format (required for our purposes)\ncolData(tse) &lt;- DataFrame(sample_meta)\n\nNow the colData includes the sample metadata.\n\nhead(colData(tse))\n##  DataFrame with 6 rows and 4 columns\n##         Treatment      Cohort TreatmentxCohort Description\n##       &lt;character&gt; &lt;character&gt;      &lt;character&gt; &lt;character&gt;\n##  A110        ADHD    Cohort_1    ADHD_Cohort_1        A110\n##  A12         ADHD    Cohort_1    ADHD_Cohort_1         A12\n##  A15         ADHD    Cohort_1    ADHD_Cohort_1         A15\n##  A19         ADHD    Cohort_1    ADHD_Cohort_1         A19\n##  A21         ADHD    Cohort_2    ADHD_Cohort_2         A21\n##  A23         ADHD    Cohort_2    ADHD_Cohort_2         A23\n\nFinally, we add a phylogenetic tree to the rowData slot. Such feature is available only in TreeSE objects. Similarly, Trees specifying the sample hierarchy can be stored in the colTree slot.\nHere, we read in the file containing the phylogenetic tree and insert it in corresponding slot of the TreeSE object.\n\n# Reads the tree file\ntree &lt;- ape::read.tree(tree_file_path)\n\n# Add tree to rowTree\nrowTree(tse) &lt;- tree\n\n# Check\ntse\n##  class: TreeSummarizedExperiment \n##  dim: 151 27 \n##  metadata(0):\n##  assays(1): counts\n##  rownames(151): 1726470 1726471 ... 17264756 17264757\n##  rowData names(6): taxonomy1 Phylum ... Family Genus\n##  colnames(27): A110 A12 ... A35 A38\n##  colData names(4): Treatment Cohort TreatmentxCohort Description\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: a LinkDataFrame (151 rows)\n##  rowTree: 1 phylo tree(s) (151 leaves)\n##  colLinks: NULL\n##  colTree: NULL\n\nNow the rowTree slot contains the phylogenetic tree:\n\nhead(rowTree(tse))\n\n\n2.4.6 Conversions between data formats in R\nIf the data has already been imported in R in another format, it can be readily converted into TreeSummarizedExperiment, as shown in our next example. Note that similar conversion functions to TreeSummarizedExperiment are available for multiple data formats via the mia package (see makeTreeSummarizedExperimentFrom* for phyloseq, Biom, and DADA2).\n\nlibrary(mia)\n\n# phyloseq example data\ndata(GlobalPatterns, package=\"phyloseq\") \nGlobalPatterns_phyloseq &lt;- GlobalPatterns\nGlobalPatterns_phyloseq\n##  phyloseq-class experiment-level object\n##  otu_table()   OTU Table:         [ 19216 taxa and 26 samples ]\n##  sample_data() Sample Data:       [ 26 samples by 7 sample variables ]\n##  tax_table()   Taxonomy Table:    [ 19216 taxa by 7 taxonomic ranks ]\n##  phy_tree()    Phylogenetic Tree: [ 19216 tips and 19215 internal nodes ]\n\n\n# convert phyloseq to TSE\nGlobalPatterns_TSE &lt;- makeTreeSummarizedExperimentFromPhyloseq(GlobalPatterns_phyloseq) \nGlobalPatterns_TSE\n##  class: TreeSummarizedExperiment \n##  dim: 19216 26 \n##  metadata(0):\n##  assays(1): counts\n##  rownames(19216): 549322 522457 ... 200359 271582\n##  rowData names(7): Kingdom Phylum ... Genus Species\n##  colnames(26): CL3 CC1 ... Even2 Even3\n##  colData names(7): X.SampleID Primer ... SampleType Description\n##  reducedDimNames(0):\n##  mainExpName: NULL\n##  altExpNames(0):\n##  rowLinks: a LinkDataFrame (19216 rows)\n##  rowTree: 1 phylo tree(s) (19216 leaves)\n##  colLinks: NULL\n##  colTree: NULL\n\nWe can also convert TreeSummarizedExperiment objects into phyloseq with respect to the shared components that are supported by both formats (i.e.¬†taxonomic abundance table, sample metadata, taxonomic table, phylogenetic tree, sequence information). This is useful for instance when additional methods are available for phyloseq.\n\n# convert TSE to phyloseq\nGlobalPatterns_phyloseq2 &lt;- makePhyloseqFromTreeSummarizedExperiment(GlobalPatterns_TSE) \nGlobalPatterns_phyloseq2\n##  phyloseq-class experiment-level object\n##  otu_table()   OTU Table:         [ 19216 taxa and 26 samples ]\n##  sample_data() Sample Data:       [ 26 samples by 7 sample variables ]\n##  tax_table()   Taxonomy Table:    [ 19216 taxa by 7 taxonomic ranks ]\n##  phy_tree()    Phylogenetic Tree: [ 19216 tips and 19215 internal nodes ]\n\nConversion is possible between other data formats. Interested readers can refer to the following functions:\n\n\nmakeTreeSummarizedExperimentFromDADA2\n\n\nmakeSummarizedExperimentFromBiom\n\n\nloadFromMetaphlan\n\nreadQZA"
  },
  {
    "objectID": "pages/97_extra_materials.html#slides",
    "href": "pages/97_extra_materials.html#slides",
    "title": "Appendix A ‚Äî Extra material",
    "section": "\nA.1 Slides",
    "text": "A.1 Slides\nOutreach material includes slide sets for training events."
  },
  {
    "objectID": "pages/97_extra_materials.html#compare-permanova",
    "href": "pages/97_extra_materials.html#compare-permanova",
    "title": "Appendix A ‚Äî Extra material",
    "section": "\nA.2 PERMANOVA comparison",
    "text": "A.2 PERMANOVA comparison\nHere we present two possible uses of the adonis2 function which performs PERMANOVA. The optional argument by has an effect on the statistical outcome, so its two options are compared here.\n\n# import necessary packages\nlibrary(gtools)\nlibrary(purrr)\nlibrary(vegan)\nlibrary(gtools)\nlibrary(purrr)\n\nLet us load the enterotype TSE object and run PERMANOVA for different orders of three variables with two different approaches: by = \"margin\" or by = \"terms\".\n\n# load and prepare data\nlibrary(mia)\ndata(\"enterotype\", package=\"mia\")\nenterotype &lt;- transformAssay(enterotype, method = \"relabundance\")\n# drop samples missing meta data\nenterotype &lt;- enterotype[ , !rowSums(is.na(colData(enterotype)[, c(\"Nationality\", \"Gender\", \"ClinicalStatus\")]) &gt; 0)]\n# define variables and list all possible combinations\nvars &lt;- c(\"Nationality\", \"Gender\", \"ClinicalStatus\")\nvar_perm &lt;- permutations(n = 3, r = 3, vars)\nformulas &lt;- apply(var_perm, 1, function(row) purrr::reduce(row, function(x, y) paste(x, \"+\", y)))\n# create empty data.frames for further storing p-values\nterms_df &lt;- data.frame(\"Formula\" = formulas,\n                       \"ClinicalStatus\" = rep(0, 6),\n                       \"Gender\" = rep(0, 6),\n                       \"Nationality\" = rep(0, 6))\nmargin_df &lt;- data.frame(\"Formula\" = formulas,\n                        \"ClinicalStatus\" = rep(0, 6),\n                        \"Gender\" = rep(0, 6),\n                        \"Nationality\" = rep(0, 6))\n\n\nfor (row_idx in 1:nrow(var_perm)) {\n  \n  # generate temporary formula (i.e. \"assay ~ ClinicalStatus + Nationality + Gender\")\n  tmp_formula &lt;- purrr::reduce(var_perm[row_idx, ], function(x, y) paste(x, \"+\", y))\n  tmp_formula &lt;- as.formula(paste0('t(assay(enterotype, \"relabundance\")) ~ ',\n                            tmp_formula))\n\n  # multiple variables, default: by = \"terms\"\n  set.seed(75)\n  with_terms &lt;- adonis2(tmp_formula, \n                by = \"terms\",\n                data = colData(enterotype),\n                permutations = 99)\n  \n  # multiple variables, by = \"margin\"\n  set.seed(75)\n  with_margin &lt;- adonis2(tmp_formula, \n                 by = \"margin\",\n                 data = colData(enterotype),\n                 permutations = 99)\n\n  # extract p-values\n  terms_p &lt;- with_terms[[\"Pr(&gt;F)\"]]\n  terms_p &lt;- terms_p[!is.na(terms_p)]\n  margin_p &lt;- with_margin[[\"Pr(&gt;F)\"]]\n  margin_p &lt;- margin_p[!is.na(margin_p)]\n  \n  # store p-values into data.frames\n  for (col_idx in 1:ncol(var_perm)) {\n    \n    terms_df[var_perm[row_idx, col_idx]][row_idx, ] &lt;- terms_p[col_idx]\n    margin_df[var_perm[row_idx, col_idx]][row_idx, ] &lt;- margin_p[col_idx]\n    \n  }\n  \n}\n\nThe following table displays the p-values for the three variables ClinicalStatus, Gender and Nationality obtained by PERMANOVA with adonis2. Note that the p-values remain identical when by = \"margin\", but change with the order of the variables in the formula when by = \"terms\" (default).\n\n\ndf &lt;- terms_df %&gt;%\n  dplyr::inner_join(margin_df, by = \"Formula\", suffix = c(\" (terms)\", \" (margin)\"))\n\nknitr::kable(df)"
  },
  {
    "objectID": "pages/97_extra_materials.html#bayesian-multinomial-logistic-normal-models",
    "href": "pages/97_extra_materials.html#bayesian-multinomial-logistic-normal-models",
    "title": "Appendix A ‚Äî Extra material",
    "section": "\nA.3 Bayesian Multinomial Logistic-Normal Models",
    "text": "A.3 Bayesian Multinomial Logistic-Normal Models\nAnalysis using such model could be performed with the function pibble from the fido package, wihch is in form of a Multinomial Logistic-Normal Linear Regression model; see vignette of package.\nThe following presents such an exemplary analysis based on the data of Sprockett et al. (2020) available through microbiomeDataSets package.\n\nSprockett, Daniel D., Melanie Martin, Elizabeth K. Costello, Adam R. Burns, Susan P. Holmes, Michael D. Gurven, and David A. Relman. 2020. ‚ÄúMicrobiota Assembly, Structure, and Dynamics Among Tsimane Horticulturalists of the Bolivian Amazon.‚Äù Nat Commun 11 (1): 3772. https://doi.org/10.1038/s41467-020-17541-6.\n\nlibrary(fido)\nlibrary(microbiomeDataSets)\ntse &lt;- SprockettTHData()\n\nWe pick three covariates (‚ÄúSex‚Äù,‚ÄúAge_Years‚Äù,‚ÄúDelivery_Mode‚Äù) during this analysis as an example, and beforehand we check for missing data:\n\nlibrary(mia)\ncov_names &lt;- c(\"Sex\",\"Age_Years\",\"Delivery_Mode\")\nna_counts &lt;- apply(is.na(colData(tse)[,cov_names]), 2, sum)\nna_summary&lt;-as.data.frame(na_counts,row.names=cov_names)\n\nWe drop missing values of the covariates:\n\ntse &lt;- tse[ , !is.na(colData(tse)$Delivery_Mode) ]\ntse &lt;- tse[ , !is.na(colData(tse)$Age_Years) ]\n\nWe agglomerate microbiome data to Phylum:\n\ntse_phylum &lt;- mergeFeaturesByRank(tse, \"Phylum\")\n\nWe extract the counts assay and covariate data to build the model matrix:\n\nY &lt;- assays(tse_phylum)$counts\n# design matrix\n# taking 3 covariates\nsample_data&lt;-as.data.frame(colData(tse_phylum)[,cov_names])\nX &lt;- t(model.matrix(~Sex+Age_Years+Delivery_Mode,data=sample_data))\n\nBuilding the parameters for the pibble call to build the model; see more at vignette:\n\nn_taxa&lt;-nrow(Y)\nupsilon &lt;- n_taxa+3\nOmega &lt;- diag(n_taxa)\nG &lt;- cbind(diag(n_taxa-1), -1)\nXi &lt;- (upsilon-n_taxa)*G%*%Omega%*%t(G)\nTheta &lt;- matrix(0, n_taxa-1, nrow(X))\nGamma &lt;- diag(nrow(X))\n\nAutomatically initializing the priors and visualizing their distributions:\n\npriors &lt;- pibble(NULL, X, upsilon, Theta, Gamma, Xi)\nnames_covariates(priors) &lt;- rownames(X)\nplot(priors, pars=\"Lambda\") + ggplot2::xlim(c(-5, 5))\n\nEstimating the posterior by including our response data Y. Note: Some computational failures could occur (see discussion) the arguments multDirichletBoot calcGradHess could be passed in such case.\n\npriors$Y &lt;- Y \nposterior &lt;- refit(priors, optim_method=\"adam\", multDirichletBoot=0.5) #calcGradHess=FALSE\n\nPrinting a summary about the posterior:\n\nppc_summary(posterior)\n\nPlotting the summary of the posterior distributions of the regression parameters:\n\nnames_categories(posterior) &lt;- rownames(Y)\nplot(posterior,par=\"Lambda\",focus.cov=rownames(X)[2:4])\n\nTaking a closer look at ‚ÄúSex‚Äù and ‚ÄúDelivery_Mode‚Äù:\n\nplot(posterior, par=\"Lambda\", focus.cov = rownames(X)[c(2,4)])"
  },
  {
    "objectID": "pages/97_extra_materials.html#interactive-3d-plots",
    "href": "pages/97_extra_materials.html#interactive-3d-plots",
    "title": "Appendix A ‚Äî Extra material",
    "section": "\nA.4 Interactive 3D Plots",
    "text": "A.4 Interactive 3D Plots\n\n# Load libraries\nlibrary(rgl)\nlibrary(plotly)\n\n\nlibrary(knitr)\nknitr::knit_hooks$set(webgl = hook_webgl)\n\nIn this section we make a 3D version of the earlier Visualizing the most dominant genus on PCoA (see @ref(quality-control)), with the help of the plotly (Sievert 2020).\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n# Importing necessary libraries\nlibrary(curatedMetagenomicData)\nlibrary(dplyr)\nlibrary(DT)\nlibrary(mia)\nlibrary(scater)\n\n# Querying the data\ntse &lt;- sampleMetadata %&gt;%\n    filter(age &gt;= 18) %&gt;% # taking only data of age 18 or above\n    filter(!is.na(alcohol)) %&gt;% # excluding missing values\n    returnSamples(\"relative_abundance\")\n\ntse_Genus &lt;- mergeFeaturesByRank(tse, rank=\"genus\")\ntse_Genus &lt;- addPerSampleDominantFeatures(tse_Genus,assay.type=\"relative_abundance\", name = \"dominant_taxa\")\n\n# Performing PCoA with Bray-Curtis dissimilarity.\ntse_Genus &lt;- runMDS(tse_Genus, FUN = vegan::vegdist, ncomponents = 3,\n              name = \"PCoA_BC\", assay.type = \"relative_abundance\")\n\n# Getting the 6 top taxa\ntop_taxa &lt;- getTopFeatures(tse_Genus,top = 6, assay.type = \"relative_abundance\")\n\n# Naming all the rest of non top-taxa as \"Other\"\nmost_abundant &lt;- lapply(colData(tse_Genus)$dominant_taxa,\n                   function(x){if (x %in% top_taxa) {x} else {\"Other\"}})\n\n# Storing the previous results as a new column within colData\ncolData(tse_Genus)$most_abundant &lt;- as.character(most_abundant)\n\n# Calculating percentage of the most abundant\nmost_abundant_freq &lt;- table(as.character(most_abundant))\nmost_abundant_percent &lt;- round(most_abundant_freq/sum(most_abundant_freq)*100, 1)\n\n# Retrieving the explained variance\ne &lt;- attr(reducedDim(tse_Genus, \"PCoA_BC\"), \"eig\");\nvar_explained &lt;- e/sum(e[e&gt;0])*100"
  },
  {
    "objectID": "pages/90_acknowledgments.html",
    "href": "pages/90_acknowledgments.html",
    "title": "Appendix B ‚Äî Contributions",
    "section": "",
    "text": "Core team\nContributions to this Gitbook from the various developers are coordinated by:\n\nLeo Lahti, DSc, professor in Data Science at the Department of Computing, University of Turku, Finland, with a focus on computational microbiome analysis. Lahti obtained doctoral degree (DSc) from Aalto University in Finland (2010), developing probabilistic machine learning with applications to high-throughput life science data integration. Since then he has focused on microbiome research and developed, for instance, the phyloseq-based microbiome R package before starting to develop the TreeSummarizedExperiment / MultiAssayExperiment framework and the mia family of Bioconductor packages for microbiome data science introduced in this gitbook. Lahti led the development of national policy on open access to research methods in Finland. He is current member in the Bioconductor Community Advisory Board and runs regular training workshops in microbiome data science.\nTuomas Borman, PhD researcher and the lead developer of OMA/mia at the Department of Computing, University of Turku.\nContributors\nThis work is a remarkably collaborative effort. The full list of contributors is available via Github. Some key authors/contributors include:\n\nFelix Ernst, PhD, among the first developers of R/Bioc methods for microbiome research based on the SummarizedExperiment class and its derivatives.\nGiulio Benedetti, scientific programmer at the Department of Computing, University of Turku. His research interest is mostly related to Data Science. He has also helped to expand the SummarizedExperiment-based microbiome analysis framework to the Julia language, implementing MicrobiomeAnalysis.jl.\nSudarshan Shetty, PhD has supported the establishment of the framework and associated tools. He also maintains a list of microbiome R packages.\nHenrik Eckermann, in particular to the development of the differential abundance analyses\nChouaib Benchraka provided various contributions to the package ecosystem and the OMA book\nYaƒümur ≈ûim≈üek converted the miaSim R package to support the Bioconductor framework\nBasil Courbayre provided various contributions to the package ecosystem and the OMA book, in particular on unsupervised machine learning\nMatti Ruuskanen, PhD, added machine learning techniques for microbiome analysis\nShigdel Rajesh, PhD\nArtur Sannikov\nJeba Akewak\nHimmi Lindgren\nLu Yang\nAcknowledgments\nThis work would not have been possible without the countless contributions and interactions with other researchers, developers, and users. We express our gratitude to the entire Bioconductor community for developing this high-quality open research software repository for life science analytics, continuously pushing the limits in emerging fields (Gentleman et al. 2004), (Huber et al. 2015).\n\nGentleman, Robert C, Vincent J Carey, Douglas M Bates, Ben Bolstad, Marcel Dettling, Sandrine Dudoit, Byron Ellis, et al. 2004. ‚ÄúBioconductor: Open Software Development for Computational Biology and Bioinformatics.‚Äù Genome Biology 5: R80.\n\nHuber, W., V. J. Carey, R. Gentleman, S. Anders, M. Carlson, B. S. Carvalho, H. C. Bravo, et al. 2015. ‚ÄúOrchestrating High-Throughput Genomic Analysis with Bioconductor.‚Äù Nature Methods 12 (2): 115‚Äì21. http://www.nature.com/nmeth/journal/v12/n2/full/nmeth.3252.html.\n\nHuang, Ruizhu. 2020. TreeSummarizedExperiment: A S4 Class for Data with Tree Structures.\n\nErnst, F. G. M., S. A. Shetty, R. Huang, Braccia D. J., Bravo H. C., and L. Lahti. 2020. ‚ÄúThe Emerging r Ecosystem for Microbiome Research.‚Äù F1000Research 9. https://doi.org/10.7490/f1000research.1118445.1.\n\nRamos, Marcel, Lucas Schiffer, Angela Re, Rimsha Azhar, Azfar Basunia, Carmen Rodriguez Cabrera, Tiffany Chan, et al. 2017. ‚ÄúSoftware for the Integration of Multiomics Experiments in Bioconductor.‚Äù Cancer Research. https://doi.org/10.1158/0008-5472.CAN-17-0344.\n\nShetty, Sudarshan, and Leo Lahti. 2019. ‚ÄúMicrobiome Data Science.‚Äù Journal of Biosciences 44: 115. https://doi.org/10.1007/s12038-019-9930-2.\nThe presented framework for microbiome data science is based on the TreeSummarizedExperiment data container created by Ruizhu Huang and others (Huang 2020), (Ernst et al. 2020), and on the MultiAssayExperiment by Marcel Ramos et al. (Ramos et al. 2017). The idea of using these containers as a basis for microbiome data science was initially advanced by the groundwork of Domenick Braccia, H√©ctor Corrada Bravo and others and brought together with other microbiome data science developers (Shetty and Lahti 2019). Setting up the base ecosystem of packages and tutorials was then subsequently led by Tuomas Borman, Felix Ernst, and Leo Lahti. We would specifically like to thank everyone who contributed to the work supporting the TreeSummarizedExperiment ecosystem for microbiome research, including but not limited to the R packages mia, miaViz, miaTime, miaSim, philr, ANCOMBC, curatedMetagenomicData, scater, scuttle, and other packages, some of which are listed in Section @ref(ecosystem). A number of other contributors have advanced the ecosystem further, and will be acknowledged in the individual packages, pull requests, issues, and other work.\nAmple demonstration data resources supporting this framework have been made available through the curatedMetagenomicData project by Edoardo Pasolli, Lucas Schiffer, Levi Waldron and others (Pasolli et al. 2017).\n\nPasolli, E, L Schiffer, P Manghi, A Renson, V Obenchain, D Truong, F Beghini, et al. 2017. ‚ÄúAccessible, Curated Metagenomic Data Through ExperimentHub.‚Äù Nature Methods 14: 1023‚Äì24. https://doi.org/10.1038/nmeth.4468.\n\nMcMurdie, PJ, and S Holmes. 2013. ‚ÄúPhyloseq: An r Package for Reproducible Interactive Analysis and Graphics of Microbiome Census Data.‚Äù PLoS ONE 8: e61217. https://doi.org/10.1371/journal.pone.0061217.\n\nAmezquita, Robert A., Aaron T. L. Lun, Etienne Becht, Vince J. Carey, Lindsay N. Carpp, Ludwig Geistlinger, Federico Marini, et al. 2020. ‚ÄúOrchestrating Single-Cell Analysis with Bioconductor.‚Äù Nature Methods 17: 137‚Äì45. https://doi.org/10.1038/s41592-019-0654-x.\nThe work has drawn initial inspiration from many sources, most notably from the work on phyloseq by Paul McMurdie and Susan Holmes (McMurdie and Holmes 2013) who pioneered the work on rigorous and reproducible microbiome data science ecosystems in R/Bioconductor. The phyloseq framework continues to provide a vast array of complementary packages and methods for microbiome studies. The Orchestrating Single-Cell Analysis with Bioconductor, or OSCA book by Robert Amezquita, Aaron Lun, Stephanie Hicks, and Raphael Gottardo (Amezquita et al. 2020) has implemented closely related work on the SummarizedExperiment data container and its derivatives in the field of single cell sequencing studies that have inspired this work.\nIn the background, the open source books by Susan Holmes and Wolfgang Huber, Modern Statistics for Modern Biology (Holmes and Huber 2019) and by Garret Grolemund and Hadley Wickham, the R for Data Science (Grolemund and Wickham 2017), and Richard McElreath‚Äôs Statistical Rethinking and the associated online resources by Solomon Kurz (McElreath 2020) are key references that have advanced reproducible data science training and dissemination.\n\nHolmes, Susan, and Wolfgang Huber. 2019. Modern Statistics for Modern Biology. New York, NY: Cambridge University Press. https://www.huber.embl.de/msmb/.\n\nGrolemund, Garret, and Hadley Wickham. 2017. R for Data Science. Vol. 77(21); e39‚Äì42. O‚ÄôReilly.\n\nMcElreath, R. 2020. Statistical Rethinking. Chapman; Hall/CRC.\n\nB.0.1 How to contribute\nTo contribute reports, follow the Git flow procedure (you can see instructions to getting started with Github):\n\nFork the project\nClone your fork\nModify the material\nCheck locally that the changes render successfully (see above)\nAdd and commit the changes to your fork\nCreate a pull request (PR) from your fork back to the original repo\nFix and discuss issues in the review process\n\nMore detailed instructions for contributing can be found on OMA README.\nSupport\nThis work has been supported by:\n\nResearch Council of Finland\nFindingPheno European Union‚Äôs Horizon 2020 research and innovation programme under grant agreement No 952914\nCOST Action network on Statistical and Machine Learning Techniques for Human Microbiome Studies (ML4microbiome) (Moreno-Indias et al. 2021).\nComputational Life Science Research Program, Biocity Turku\nTurku University Foundation\n\n\n\n\nMoreno-Indias, Isabel, Leo Lahti, Miroslava Nedyalkova, Ilze Elbere, Gennady V. Roshchupkin, Muhamed Adilovic, Onder Aydemir, et al. 2021. ‚ÄúStatistical and Machine Learning Techniques in Human Microbiome Studies: Contemporary Challenges and Solutions.‚Äù Frontiers in Microbiology 12: 277. https://doi.org/10.3389/fmicb.2021.635781.\n\n Back to top"
  },
  {
    "objectID": "pages/Session_info.html",
    "href": "pages/Session_info.html",
    "title": "Appendix C ‚Äî Session info",
    "section": "",
    "text": "sessioninfo::session_info(\n    installed.packages()[,\"Package\"], \n    include_base = TRUE\n)\n##  ‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n##   setting  value\n##   version  R Under development (unstable) (2023-11-08 r85496)\n##   os       Ubuntu 22.04.3 LTS\n##   system   x86_64, linux-gnu\n##   ui       X11\n##   language (EN)\n##   collate  C\n##   ctype    en_US.UTF-8\n##   tz       Etc/UTC\n##   date     2023-11-15\n##   pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown)\n##  \n##  ‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n##   package                  * version    date (UTC) lib source\n##   abind                      1.4-5      2016-07-21 [2] CRAN (R 4.4.0)\n##   ade4                       1.7-22     2023-02-06 [2] CRAN (R 4.4.0)\n##   AnnotationDbi              1.65.2     2023-11-03 [2] Bioconductor\n##   AnnotationHub              3.11.0     2023-10-25 [2] Bioconductor\n##   ape                        5.7-1      2023-03-13 [2] CRAN (R 4.4.0)\n##   arrayhelpers               1.1-0      2020-02-04 [2] CRAN (R 4.4.0)\n##   askpass                    1.2.0      2023-09-03 [2] CRAN (R 4.4.0)\n##   backports                  1.4.1      2021-12-13 [2] CRAN (R 4.4.0)\n##   base                     * 4.4.0      2023-11-09 [3] local\n##   base64enc                  0.1-3      2015-07-28 [2] CRAN (R 4.4.0)\n##   beachmat                   2.19.0     2023-10-24 [2] Bioconductor\n##   beeswarm                   0.4.0      2021-06-01 [2] CRAN (R 4.4.0)\n##   BH                         1.81.0-1   2023-01-22 [2] CRAN (R 4.4.0)\n##   Biobase                    2.63.0     2023-10-24 [2] Bioconductor\n##   BiocBaseUtils              1.5.0      2023-10-24 [2] Bioconductor\n##   BiocFileCache              2.11.1     2023-10-26 [2] Bioconductor\n##   BiocGenerics               0.49.1     2023-11-01 [2] Bioconductor\n##   BiocManager                1.30.22    2023-08-08 [2] CRAN (R 4.4.0)\n##   BiocNeighbors              1.21.0     2023-10-24 [2] Bioconductor\n##   BiocParallel               1.37.0     2023-10-24 [2] Bioconductor\n##   BiocSingular               1.19.0     2023-10-24 [2] Bioconductor\n##   BiocStyle                  2.31.0     2023-10-24 [2] Bioconductor\n##   BiocVersion                3.19.1     2023-10-26 [2] Bioconductor\n##   biomformat                 1.31.0     2023-10-24 [2] Bioconductor\n##   Biostrings                 2.71.1     2023-10-25 [2] Bioconductor\n##   bit                        4.0.5      2022-11-15 [2] CRAN (R 4.4.0)\n##   bit64                      4.0.5      2020-08-30 [2] CRAN (R 4.4.0)\n##   bitops                     1.0-7      2021-04-24 [2] CRAN (R 4.4.0)\n##   blob                       1.2.4      2023-03-17 [2] CRAN (R 4.4.0)\n##   bluster                    1.13.0     2023-10-24 [2] Bioconductor\n##   bookdown                   0.36       2023-10-16 [2] CRAN (R 4.4.0)\n##   boot                       1.3-28.1   2022-11-22 [3] CRAN (R 4.4.0)\n##   brew                       1.0-8      2022-09-29 [2] CRAN (R 4.4.0)\n##   brio                       1.1.3      2021-11-30 [2] CRAN (R 4.4.0)\n##   bslib                      0.5.1      2023-08-11 [2] CRAN (R 4.4.0)\n##   cachem                     1.0.8      2023-05-01 [2] CRAN (R 4.4.0)\n##   Cairo                      1.6-1      2023-08-18 [2] CRAN (R 4.4.0)\n##   callr                      3.7.3      2022-11-02 [2] CRAN (R 4.4.0)\n##   checkmate                  2.3.0      2023-10-25 [2] CRAN (R 4.4.0)\n##   class                      7.3-22     2023-05-03 [3] CRAN (R 4.4.0)\n##   cli                        3.6.1      2023-03-23 [2] CRAN (R 4.4.0)\n##   clipr                      0.8.0      2022-02-22 [2] CRAN (R 4.4.0)\n##   cluster                    2.1.4      2022-08-22 [3] CRAN (R 4.4.0)\n##   coda                       0.19-4     2020-09-30 [2] CRAN (R 4.4.0)\n##   CodeDepends                0.6.5      2018-07-17 [2] CRAN (R 4.4.0)\n##   codetools                  0.2-19     2023-02-01 [3] CRAN (R 4.4.0)\n##   colorspace                 2.1-0      2023-01-23 [2] CRAN (R 4.4.0)\n##   commonmark                 1.9.0      2023-03-17 [2] CRAN (R 4.4.0)\n##   compiler                   4.4.0      2023-11-09 [3] local\n##   cpp11                      0.4.6      2023-08-10 [2] CRAN (R 4.4.0)\n##   crayon                     1.5.2      2022-09-29 [2] CRAN (R 4.4.0)\n##   credentials                2.0.1      2023-09-06 [2] CRAN (R 4.4.0)\n##   crosstalk                  1.2.0      2021-11-04 [2] CRAN (R 4.4.0)\n##   curatedMetagenomicData     3.11.0     2023-10-31 [2] Bioconductor\n##   curl                       5.1.0      2023-10-02 [2] CRAN (R 4.4.0)\n##   data.table                 1.14.8     2023-02-17 [2] CRAN (R 4.4.0)\n##   datasets                 * 4.4.0      2023-11-09 [3] local\n##   DBI                        1.1.3      2022-06-18 [2] CRAN (R 4.4.0)\n##   dbplyr                     2.4.0      2023-10-26 [2] CRAN (R 4.4.0)\n##   DECIPHER                   2.31.0     2023-10-24 [2] Bioconductor\n##   decontam                   1.23.0     2023-10-24 [2] Bioconductor\n##   DelayedArray               0.29.0     2023-10-24 [2] Bioconductor\n##   DelayedMatrixStats         1.25.1     2023-11-09 [2] Bioconductor\n##   desc                       1.4.2      2022-09-08 [2] CRAN (R 4.4.0)\n##   devtools                   2.4.5      2022-10-11 [2] CRAN (R 4.4.0)\n##   diffobj                    0.3.5      2021-10-05 [2] CRAN (R 4.4.0)\n##   digest                     0.6.33     2023-07-07 [2] CRAN (R 4.4.0)\n##   dir.expiry                 1.11.0     2023-10-24 [2] Bioconductor\n##   DirichletMultinomial       1.45.0     2023-10-24 [2] Bioconductor\n##   distributional             0.3.2      2023-03-22 [2] CRAN (R 4.4.0)\n##   docopt                     0.7.1      2020-06-24 [2] CRAN (R 4.4.0)\n##   downlit                    0.4.3      2023-06-29 [2] CRAN (R 4.4.0)\n##   dplyr                      1.1.3      2023-09-03 [2] CRAN (R 4.4.0)\n##   dqrng                      0.3.1      2023-08-30 [2] CRAN (R 4.4.0)\n##   DT                         0.30       2023-10-05 [2] CRAN (R 4.4.0)\n##   ellipsis                   0.3.2      2021-04-29 [2] CRAN (R 4.4.0)\n##   evaluate                   0.23       2023-11-01 [2] CRAN (R 4.4.0)\n##   ExperimentHub              2.11.0     2023-10-25 [2] Bioconductor\n##   fansi                      1.0.5      2023-10-08 [2] CRAN (R 4.4.0)\n##   farver                     2.1.1      2022-07-06 [2] CRAN (R 4.4.0)\n##   fastmap                    1.1.1      2023-02-24 [2] CRAN (R 4.4.0)\n##   fido                       1.0.4      2023-03-24 [2] CRAN (R 4.4.0)\n##   filelock                   1.0.2      2018-10-05 [2] CRAN (R 4.4.0)\n##   FNN                        1.1.3.2    2023-03-20 [2] CRAN (R 4.4.0)\n##   fontawesome                0.5.2      2023-08-19 [2] CRAN (R 4.4.0)\n##   foreach                    1.5.2      2022-02-02 [2] CRAN (R 4.4.0)\n##   foreign                    0.8-85     2023-09-09 [3] CRAN (R 4.4.0)\n##   formatR                    1.14       2023-01-17 [2] CRAN (R 4.4.0)\n##   fs                         1.6.3      2023-07-20 [2] CRAN (R 4.4.0)\n##   futile.logger              1.4.3      2016-07-10 [2] CRAN (R 4.4.0)\n##   futile.options             1.0.1      2018-04-20 [2] CRAN (R 4.4.0)\n##   generics                   0.1.3      2022-07-05 [2] CRAN (R 4.4.0)\n##   GenomeInfoDb               1.39.1     2023-11-08 [2] Bioconductor\n##   GenomeInfoDbData           1.2.11     2023-11-15 [2] Bioconductor\n##   GenomicRanges              1.55.1     2023-10-29 [2] Bioconductor\n##   gert                       2.0.0      2023-09-26 [2] CRAN (R 4.4.0)\n##   ggbeeswarm                 0.7.2      2023-04-29 [2] CRAN (R 4.4.0)\n##   ggdist                     3.3.0      2023-05-13 [2] CRAN (R 4.4.0)\n##   ggplot2                    3.4.4      2023-10-12 [2] CRAN (R 4.4.0)\n##   ggrastr                    1.0.2      2023-06-01 [2] CRAN (R 4.4.0)\n##   ggrepel                    0.9.4      2023-10-13 [2] CRAN (R 4.4.0)\n##   gh                         1.4.0      2023-02-22 [2] CRAN (R 4.4.0)\n##   gitcreds                   0.1.2      2022-09-08 [2] CRAN (R 4.4.0)\n##   glue                       1.6.2      2022-02-24 [2] CRAN (R 4.4.0)\n##   graph                      1.81.0     2023-10-24 [2] Bioconductor\n##   graphics                 * 4.4.0      2023-11-09 [3] local\n##   grDevices                * 4.4.0      2023-11-09 [3] local\n##   grid                       4.4.0      2023-11-09 [3] local\n##   gridExtra                  2.3        2017-09-09 [2] CRAN (R 4.4.0)\n##   gtable                     0.3.4      2023-08-21 [2] CRAN (R 4.4.0)\n##   gtools                     3.9.4      2022-11-27 [2] CRAN (R 4.4.0)\n##   highr                      0.10       2022-12-22 [2] CRAN (R 4.4.0)\n##   htmltools                  0.5.7      2023-11-03 [2] CRAN (R 4.4.0)\n##   htmlwidgets                1.6.2      2023-03-17 [2] CRAN (R 4.4.0)\n##   httpuv                     1.6.12     2023-10-23 [2] CRAN (R 4.4.0)\n##   httr                       1.4.7      2023-08-15 [2] CRAN (R 4.4.0)\n##   httr2                      0.2.3      2023-05-08 [2] CRAN (R 4.4.0)\n##   igraph                     1.5.1      2023-08-10 [2] CRAN (R 4.4.0)\n##   ini                        0.3.1      2018-05-20 [2] CRAN (R 4.4.0)\n##   interactiveDisplayBase     1.41.0     2023-10-24 [2] Bioconductor\n##   IRanges                    2.37.0     2023-10-24 [2] Bioconductor\n##   irlba                      2.3.5.1    2022-10-03 [2] CRAN (R 4.4.0)\n##   isoband                    0.2.7      2022-12-20 [2] CRAN (R 4.4.0)\n##   iterators                  1.0.14     2022-02-05 [2] CRAN (R 4.4.0)\n##   jquerylib                  0.1.4      2021-04-26 [2] CRAN (R 4.4.0)\n##   jsonlite                   1.8.7      2023-06-29 [2] CRAN (R 4.4.0)\n##   KEGGREST                   1.43.0     2023-10-24 [2] Bioconductor\n##   KernSmooth                 2.23-22    2023-07-10 [3] CRAN (R 4.4.0)\n##   knitr                      1.45       2023-10-30 [2] CRAN (R 4.4.0)\n##   labeling                   0.4.3      2023-08-29 [2] CRAN (R 4.4.0)\n##   lambda.r                   1.2.4      2019-09-18 [2] CRAN (R 4.4.0)\n##   later                      1.3.1      2023-05-02 [2] CRAN (R 4.4.0)\n##   lattice                    0.22-5     2023-10-24 [3] CRAN (R 4.4.0)\n##   lazyeval                   0.2.2      2019-03-15 [2] CRAN (R 4.4.0)\n##   lifecycle                  1.0.4      2023-11-07 [2] CRAN (R 4.4.0)\n##   littler                    0.3.18     2023-03-26 [2] CRAN (R 4.4.0)\n##   magrittr                   2.0.3      2022-03-30 [2] CRAN (R 4.4.0)\n##   MASS                       7.3-60.1   2023-11-09 [3] local\n##   Matrix                     1.6-2      2023-11-08 [3] CRAN (R 4.4.0)\n##   MatrixGenerics             1.15.0     2023-10-24 [2] Bioconductor\n##   matrixStats                1.1.0      2023-11-07 [2] CRAN (R 4.4.0)\n##   memoise                    2.0.1      2021-11-26 [2] CRAN (R 4.4.0)\n##   methods                  * 4.4.0      2023-11-09 [3] local\n##   mgcv                       1.9-0      2023-07-11 [3] CRAN (R 4.4.0)\n##   mia                        1.11.0     2023-10-24 [2] Bioconductor\n##   miaTime                    0.1.21     2023-11-15 [2] Github (microbiome/miaTime@9fe9771)\n##   microbiomeDataSets         1.11.0     2023-10-26 [2] Bioconductor\n##   mime                       0.12       2021-09-28 [2] CRAN (R 4.4.0)\n##   miniUI                     0.1.1.1    2018-05-18 [2] CRAN (R 4.4.0)\n##   MultiAssayExperiment       1.29.0     2023-10-24 [2] Bioconductor\n##   multtest                   2.59.0     2023-10-24 [2] Bioconductor\n##   munsell                    0.5.0      2018-06-12 [2] CRAN (R 4.4.0)\n##   nlme                       3.1-163    2023-08-09 [3] CRAN (R 4.4.0)\n##   nnet                       7.3-19     2023-05-03 [3] CRAN (R 4.4.0)\n##   numDeriv                   2016.8-1.1 2019-06-06 [2] CRAN (R 4.4.0)\n##   OMA                        0.98.16    2023-11-15 [1] Bioconductor\n##   openssl                    2.1.1      2023-09-25 [2] CRAN (R 4.4.0)\n##   parallel                   4.4.0      2023-11-09 [3] local\n##   permute                    0.9-7      2022-01-27 [2] CRAN (R 4.4.0)\n##   pheatmap                   1.0.12     2019-01-04 [2] CRAN (R 4.4.0)\n##   phyloseq                   1.47.0     2023-10-24 [2] Bioconductor\n##   pillar                     1.9.0      2023-03-22 [2] CRAN (R 4.4.0)\n##   pixmap                     0.4-12     2021-01-29 [2] CRAN (R 4.4.0)\n##   pkgbuild                   1.4.2      2023-06-26 [2] CRAN (R 4.4.0)\n##   pkgconfig                  2.0.3      2019-09-22 [2] CRAN (R 4.4.0)\n##   pkgdown                    2.0.7      2022-12-14 [2] CRAN (R 4.4.0)\n##   pkgload                    1.3.3      2023-09-22 [2] CRAN (R 4.4.0)\n##   plogr                      0.2.0      2018-03-25 [2] CRAN (R 4.4.0)\n##   plotly                     4.10.3     2023-10-21 [2] CRAN (R 4.4.0)\n##   plyr                       1.8.9      2023-10-02 [2] CRAN (R 4.4.0)\n##   png                        0.1-8      2022-11-29 [2] CRAN (R 4.4.0)\n##   posterior                  1.5.0      2023-10-31 [2] CRAN (R 4.4.0)\n##   praise                     1.0.0      2015-08-11 [2] CRAN (R 4.4.0)\n##   preprocessCore             1.65.0     2023-10-24 [2] Bioconductor\n##   prettyunits                1.2.0      2023-09-24 [2] CRAN (R 4.4.0)\n##   processx                   3.8.2      2023-06-30 [2] CRAN (R 4.4.0)\n##   profvis                    0.3.8      2023-05-02 [2] CRAN (R 4.4.0)\n##   promises                   1.2.1      2023-08-10 [2] CRAN (R 4.4.0)\n##   ps                         1.7.5      2023-04-18 [2] CRAN (R 4.4.0)\n##   purrr                      1.0.2      2023-08-10 [2] CRAN (R 4.4.0)\n##   quadprog                   1.5-8      2019-11-20 [2] CRAN (R 4.4.0)\n##   R6                         2.5.1      2021-08-19 [2] CRAN (R 4.4.0)\n##   ragg                       1.2.6      2023-10-10 [2] CRAN (R 4.4.0)\n##   rappdirs                   0.3.3      2021-01-31 [2] CRAN (R 4.4.0)\n##   rcmdcheck                  1.4.0      2021-09-27 [2] CRAN (R 4.4.0)\n##   RColorBrewer               1.1-3      2022-04-03 [2] CRAN (R 4.4.0)\n##   Rcpp                       1.0.11     2023-07-06 [2] CRAN (R 4.4.0)\n##   RcppAnnoy                  0.0.21     2023-07-02 [2] CRAN (R 4.4.0)\n##   RcppArmadillo              0.12.6.6.0 2023-11-01 [2] CRAN (R 4.4.0)\n##   RcppEigen                  0.3.3.9.4  2023-11-02 [2] CRAN (R 4.4.0)\n##   RcppGSL                    0.3.13     2023-01-13 [2] CRAN (R 4.4.0)\n##   RcppHNSW                   0.5.0      2023-09-19 [2] CRAN (R 4.4.0)\n##   RcppML                     0.3.7      2021-09-21 [2] CRAN (R 4.4.0)\n##   RcppNumerical              0.6-0      2023-09-06 [2] CRAN (R 4.4.0)\n##   RcppProgress               0.4.2      2020-02-06 [2] CRAN (R 4.4.0)\n##   RcppZiggurat               0.1.6      2020-10-20 [2] CRAN (R 4.4.0)\n##   RCurl                      1.98-1.13  2023-11-02 [2] CRAN (R 4.4.0)\n##   rebook                     1.13.0     2023-10-24 [2] Bioconductor\n##   rematch2                   2.1.2      2020-05-01 [2] CRAN (R 4.4.0)\n##   remotes                    2.4.2.1    2023-07-18 [2] CRAN (R 4.4.0)\n##   reshape2                   1.4.4      2020-04-09 [2] CRAN (R 4.4.0)\n##   rgl                        1.2.1      2023-07-06 [2] CRAN (R 4.4.0)\n##   rhdf5                      2.47.0     2023-10-24 [2] Bioconductor\n##   rhdf5filters               1.15.1     2023-11-06 [2] Bioconductor\n##   Rhdf5lib                   1.25.0     2023-10-24 [2] Bioconductor\n##   rlang                      1.1.2      2023-11-04 [2] CRAN (R 4.4.0)\n##   rmarkdown                  2.25       2023-09-18 [2] CRAN (R 4.4.0)\n##   roxygen2                   7.2.3      2022-12-08 [2] CRAN (R 4.4.0)\n##   rpart                      4.1.21     2023-10-09 [3] CRAN (R 4.4.0)\n##   rprojroot                  2.0.4      2023-11-05 [2] CRAN (R 4.4.0)\n##   RSQLite                    2.3.3      2023-11-04 [2] CRAN (R 4.4.0)\n##   rstudioapi                 0.15.0     2023-07-07 [2] CRAN (R 4.4.0)\n##   rsvd                       1.0.5      2021-04-16 [2] CRAN (R 4.4.0)\n##   Rtsne                      0.16       2022-04-17 [2] CRAN (R 4.4.0)\n##   rversions                  2.1.2      2022-08-31 [2] CRAN (R 4.4.0)\n##   S4Arrays                   1.3.0      2023-10-24 [2] Bioconductor\n##   S4Vectors                  0.41.1     2023-10-26 [2] Bioconductor\n##   sass                       0.4.7      2023-07-15 [2] CRAN (R 4.4.0)\n##   ScaledMatrix               1.11.0     2023-10-24 [2] Bioconductor\n##   scales                     1.2.1      2022-08-20 [2] CRAN (R 4.4.0)\n##   scater                     1.31.0     2023-10-24 [2] Bioconductor\n##   scuttle                    1.13.0     2023-10-24 [2] Bioconductor\n##   sessioninfo                1.2.2      2021-12-06 [2] CRAN (R 4.4.0)\n##   shiny                      1.7.5.1    2023-10-14 [2] CRAN (R 4.4.0)\n##   SingleCellExperiment       1.25.0     2023-10-24 [2] Bioconductor\n##   sitmo                      2.0.2      2021-10-13 [2] CRAN (R 4.4.0)\n##   snow                       0.4-4      2021-10-27 [2] CRAN (R 4.4.0)\n##   sourcetools                0.1.7-1    2023-02-01 [2] CRAN (R 4.4.0)\n##   sp                         2.1-1      2023-10-16 [2] CRAN (R 4.4.0)\n##   SparseArray                1.3.1      2023-11-07 [2] Bioconductor\n##   sparseMatrixStats          1.15.0     2023-10-24 [2] Bioconductor\n##   spatial                    7.3-17     2023-07-20 [3] CRAN (R 4.4.0)\n##   splines                    4.4.0      2023-11-09 [3] local\n##   stats                    * 4.4.0      2023-11-09 [3] local\n##   stats4                     4.4.0      2023-11-09 [3] local\n##   stringi                    1.8.1      2023-11-13 [2] CRAN (R 4.4.0)\n##   stringr                    1.5.1      2023-11-14 [2] CRAN (R 4.4.0)\n##   SummarizedExperiment       1.33.0     2023-10-24 [2] Bioconductor\n##   survival                   3.5-7      2023-08-14 [3] CRAN (R 4.4.0)\n##   svUnit                     1.0.6      2021-04-19 [2] CRAN (R 4.4.0)\n##   sys                        3.4.2      2023-05-23 [2] CRAN (R 4.4.0)\n##   systemfonts                1.0.5      2023-10-09 [2] CRAN (R 4.4.0)\n##   tcltk                      4.4.0      2023-11-09 [3] local\n##   tensorA                    0.36.2     2020-11-19 [2] CRAN (R 4.4.0)\n##   testthat                   3.2.0      2023-10-06 [2] CRAN (R 4.4.0)\n##   textshaping                0.3.7      2023-10-09 [2] CRAN (R 4.4.0)\n##   tibble                     3.2.1      2023-03-20 [2] CRAN (R 4.4.0)\n##   tidybayes                  3.0.6      2023-08-12 [2] CRAN (R 4.4.0)\n##   tidyr                      1.3.0      2023-01-24 [2] CRAN (R 4.4.0)\n##   tidyselect                 1.2.0      2022-10-10 [2] CRAN (R 4.4.0)\n##   tidytree                   0.4.5      2023-08-10 [2] CRAN (R 4.4.0)\n##   tinytex                    0.48       2023-10-13 [2] CRAN (R 4.4.0)\n##   tools                      4.4.0      2023-11-09 [3] local\n##   treeio                     1.27.0     2023-10-24 [2] Bioconductor\n##   TreeSummarizedExperiment   2.11.0     2023-10-24 [2] Bioconductor\n##   urlchecker                 1.0.1      2021-11-30 [2] CRAN (R 4.4.0)\n##   usethis                    2.2.2      2023-07-06 [2] CRAN (R 4.4.0)\n##   utf8                       1.2.4      2023-10-22 [2] CRAN (R 4.4.0)\n##   utils                    * 4.4.0      2023-11-09 [3] local\n##   uwot                       0.1.16     2023-06-29 [2] CRAN (R 4.4.0)\n##   vctrs                      0.6.4      2023-10-12 [2] CRAN (R 4.4.0)\n##   vegan                      2.6-4      2022-10-11 [2] CRAN (R 4.4.0)\n##   vipor                      0.4.5      2017-03-22 [2] CRAN (R 4.4.0)\n##   viridis                    0.6.4      2023-07-22 [2] CRAN (R 4.4.0)\n##   viridisLite                0.4.2      2023-05-02 [2] CRAN (R 4.4.0)\n##   waldo                      0.5.2      2023-11-02 [2] CRAN (R 4.4.0)\n##   whisker                    0.4.1      2022-12-05 [2] CRAN (R 4.4.0)\n##   withr                      2.5.2      2023-10-30 [2] CRAN (R 4.4.0)\n##   xfun                       0.41       2023-11-01 [2] CRAN (R 4.4.0)\n##   XML                        3.99-0.15  2023-11-02 [2] CRAN (R 4.4.0)\n##   xml2                       1.3.5      2023-07-06 [2] CRAN (R 4.4.0)\n##   xopen                      1.0.0      2018-09-17 [2] CRAN (R 4.4.0)\n##   xtable                     1.8-4      2019-04-21 [2] CRAN (R 4.4.0)\n##   XVector                    0.43.0     2023-10-24 [2] Bioconductor\n##   yaml                       2.3.7      2023-01-23 [2] CRAN (R 4.4.0)\n##   yulab.utils                0.1.0      2023-09-20 [2] CRAN (R 4.4.0)\n##   zip                        2.3.0      2023-04-17 [2] CRAN (R 4.4.0)\n##   zlibbioc                   1.49.0     2023-10-24 [2] Bioconductor\n##  \n##   [1] /tmp/RtmpX5VR41/Rinstb5c6a93f8\n##   [2] /usr/local/lib/R/site-library\n##   [3] /usr/local/lib/R/library\n##  \n##  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n\n\n\n Back to top"
  }
]